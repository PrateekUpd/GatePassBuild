{"version":3,"sources":["webpack:///$_lazy_route_resource lazy namespace object","webpack:///src/app/admin-authorization/admin-authorization.component.ts","webpack:///src/app/admin-authorization/admin-authorization.component.html","webpack:///src/app/admin-authorization/snack-bar-component-snack.html","webpack:///src/app/admin-data-control/admin-data-control.component.ts","webpack:///src/app/admin-data-control/admin-data-control.component.html","webpack:///src/app/animations/template.animations.ts","webpack:///src/app/app-routing.module.ts","webpack:///src/app/app.component.ts","webpack:///src/app/app.component.html","webpack:///src/app/dialog-content-print.html","webpack:///src/app/app.module.ts","webpack:///src/app/employee-search/employee-search.component.ts","webpack:///src/app/employee-search/employee-search.component.html","webpack:///src/app/filter-gate-pass/filter-gate-pass.component.ts","webpack:///src/app/filter-gate-pass/filter-gate-pass.component.html","webpack:///src/app/gate-pass/gate-pass.component.ts","webpack:///src/app/gate-pass/gate-pass.component.html","webpack:///src/app/gate-pass/snack-bar-component-gpCreated.html","webpack:///src/app/gatepass-search/gatepass-search.component.ts","webpack:///src/app/gatepass-search/gatepass-search.component.html","webpack:///src/app/guards/auth.guard.ts","webpack:///src/app/guards/authorize.guard.ts","webpack:///src/app/guards/create.guard.ts","webpack:///src/app/guards/login.guard.ts","webpack:///src/app/guards/role.guard.ts","webpack:///src/app/guards/super-admin.guard.ts","webpack:///src/app/home/home.component.ts","webpack:///src/app/home/home.component.html","webpack:///src/app/inbox/inbox.component.ts","webpack:///src/app/inbox/inbox.component.html","webpack:///src/app/login/login.component.ts","webpack:///src/app/login/login.component.html","webpack:///src/app/messages/messages.component.ts","webpack:///src/app/messages/messages.component.html","webpack:///src/app/page-not-found/page-not-found.component.ts","webpack:///src/app/page-not-found/page-not-found.component.html","webpack:///src/app/profile/profile.component.ts","webpack:///src/app/profile/profile.component.html","webpack:///src/app/profile/dialog-content-home.html","webpack:///src/app/profile/snack-bar-component-userEdited.html","webpack:///src/app/quantity-ret-validator.directive.ts","webpack:///src/app/register/register.component.ts","webpack:///src/app/register/register.component.html","webpack:///src/app/report/report.component.ts","webpack:///src/app/report/report.component.html","webpack:///src/app/return/return.component.ts","webpack:///src/app/return/return.component.html","webpack:///src/app/return/dialog-content-return.html","webpack:///src/app/return/snack-bar-component-returnSnack.html","webpack:///src/app/services/message/message.service.ts","webpack:///src/app/services/print/print.service.ts","webpack:///src/app/services/user/user.service.ts","webpack:///src/app/token.interceptor.ts","webpack:///src/environments/environment.ts","webpack:///src/main.ts","webpack:///fs (ignored)","webpack:///crypto (ignored)","webpack:///stream (ignored)"],"names":["webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","module","exports","id","AdminAuthorizationComponent","userService","_snackBar","authId","uId","console","log","selectedAuthUser","authorizedTo","iterator","Symbol","authorizedToo","empId","openFromComponent","AlreadyAuthComponent","duration","addAuthorization","subscribe","authUser","selector","templateUrl","styleUrls","styles","AdminDataControlComponent","fb","router","fields","deleteForm","group","_id","required","selectedField","editForm","selectedItem","update","getDepartments","departments","items","getGrades","grades","getProjects","projects","selectedItem2","items2","tolerance","getUnits","units","unitId","unit","find","item","patchValue","projectId","project","gates","selectedField2","addForm","viewValue","itemsAdd","selectedField3","itemsDelete","editData","updateDepartment","Item","snackBarMessage","location","reload","updateGrade","updateProject","updateGate","updateUnit","addData","addDepartment","addGrade","addProject","addUnit","addGate","deleteData","deleteDepartment","deleteGrade","deleteProject","onChange","onChange2","onChange3","rowsAnimation","height","opacity","transform","routes","path","redirectTo","pathMatch","component","canActivate","AppRoutingModule","forRoot","imports","AppComponent","dialog","title","logOutUser","navigate","dialogRef","open","DialogContentPrint","data","loggedIn","selectedProject","afterClosed","result","MessageSnackComponent","AppModule","provide","useClass","multi","declarations","entryComponents","providers","bootstrap","EmployeeSearchComponent","adminAuth","searchTerms","term","next","users$","pipe","searchUsers","selectedAuth","user","selectedUnAuthUser","search","FilterGatePassComponent","filterForm","selectedDepartment","selectedType","selectedOwner","selectedMovement","from","compose","to","getFilterGpArray","gpArrays","onSubmit","GatePassComponent","createForm","name","selectedGate","receiver","firm","vendorName","dcGatePass","gatePasses","types","owners","movements","gpArray","gatePassNo","createdBy","authorized","authorizedDate","status","gatePass","dsGatePass","push","createNewGatePass","Units","setGates","value","dc","dcDate","pop","forEach","dateOfReturn","sno","modeOfTransport","description","quantity","issuedTo","reason","remark","incomingRef","length","filter","alert","addGpArray","GpCreatedComponent","selectedGpArray","storeGpArray","dateFunc","onSubmitFunc","addRow","deleteRow","animations","GatepassSearchComponent","printService","gatePasses$","searchGatePasses","print","generatePdf","AuthGuard","state","providedIn","AuthorizeGuard","selectedAuthorization","CreateGuard","selectedCreation","LoginGuard","RoleGuard","selectedUserType","SuperAdminGuard","HomeComponent","InboxComponent","displayedColumns","authDisplayedColumns","searchTableData","authSearchTableData","authToId","pendingBool","authBool","getGpArray","getAuthGpArray","gp","tableRow","dateOfCreation","createdAt","dueDateOfReturn","department","owner","movement","vId","row","rId","onSelect","aRId","authGpArrays","event","filterValue","target","dataSource","trim","toLowerCase","authDataSource","authTo","getInboxGpArray","filterData","getInboxAuthGpArray","authFilterData","LoginComponent","hide","loginForm","maxLength","minLength","password","loginData","loginUser","reset","error","messageService","MessagesComponent","PageNotFoundComponent","ProfileComponent","dcUserAuthTo","dcUserHistory","dcUserHistoryGrade","dcUserHistoryProject","showBool","userTypes","authorizations","creations","disableTextbox","dsUserAuthTo","dsUserHistory","Department","dsUserHistoryGrade","Grade","dsUserHistoryProject","Project","redirectFunc","checkUserType","undefined","getUser","DialogContentHome","updateUser","updatedUser","UserEditedComponent","cancel","QuantityRetValidatorDirective","control","words","str","split","quantityStr","toleranceStr","quantityNum","Number","toleranceNum","quantityRet","quantityRetTop","quantityRetBottom","invalidQuantity","useExisting","RegisterComponent","securityType","registerForm","selectedGrade","getUsers","userType","contains","removeControl","setControl","addControl","users","registerData","addUser","warn","userTypeFunc","ReportComponent","refreshFilter","getFilter","applyFilter","sheet","Props","$event","stopPropagation","selection","vfs","pdfMake","ReturnComponent","dcGatePassStd","dcGatePassRet","dcGatePassRetNoCheck","returnState","exitBool","deleteBool","returnBool","setSelectedGpArray","getGpNoFromLocal","DialogContentReturn","header","message","deleteGpArray","numSelected","selected","numRows","isAllSelected","clear","select","isSelected","updateData","ReturnSnackComponent","toString","createdByDetails","authorizedDetails","gpStatusCheck","gatePassTypeCheck","checkAuth","checkEdit","checkExit","checkReturn","checkDelete","iterator4","Pro","iterator5","Gra","iterator6","Dep","iterator2","iterator3","editBool","selectedGpArray2","updateGpArray","updatedGpArray","msg","MessageService","messages","PrintService","selectedGateId","gate","selectedGateViewValue","table","widths","body","text","style","map","date","exs","authorizedAtDate","authorizedAtTime","columns","createdAtDate","createdAtTime","sessionStorage","setItem","JSON","stringify","pageOrientation","content","bold","fontSize","alignment","margin","getGatePassObject","getCreatedByObject","getAuthorizedByHeaderObject","getAuthorizedByObject","info","author","subject","keywords","tableHeader","source","calcSelectedGate","documentDefinition","getDocumentDefinition","createPdf","UserService","http","usersUrl","checkLoggedIn","JWT_TOKEN","REFRESH_TOKEN","httpOptions","headers","parse","localStorage","getItem","url","add","get","_","handleError","post","storeFilter","gatePassNoNum","String","put","newDepartment","grade","newGrade","newUnit","newProject","newGate","newUser","doUpdateUser","storeUser","newCreateForm","newgpArray","newGatePass","userJwt","doLoginUser","tokens","storeTokens","jwt","refreshToken","getRefreshToken","doLogoutUser","removeTokens","removeItem","storeJwtToken","x","operation","snackBarError","statusText","TokenInterceptor","isRefreshing","refreshTokenSubject","request","getJwtToken","addToken","handle","handle401Error","token","clone","setHeaders","environment","production","bootstrapModule","err"],"mappings":"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","file":"main-es5.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","import { Component, OnInit } from '@angular/core';\nimport { UserService } from '../services/user/user.service';\nimport { User } from '../models/user';\nimport { MatSnackBar } from '@angular/material/snack-bar';\n\n@Component({\n  selector: 'app-admin-authorization',\n  templateUrl: './admin-authorization.component.html',\n  styleUrls: ['./admin-authorization.component.css']\n})\nexport class AdminAuthorizationComponent implements OnInit {\n\n  constructor(public userService: UserService, private _snackBar: MatSnackBar) { }\n  ngOnInit() {\n  }\n\n\n  selectedAuthUser: User\n  // onSelect(authUser: User): void {\n  //   this.selectedAuthUser = authUser;\n  //   console.log(this.selectedAuthUser)\n  // }\n\n  selectedUnAuthUser: User\n  // onSelectUnAuth(unAuthUser: User): void {\n  //   this.selectedUnAuthUser = unAuthUser;\n  // }\n\n  // authUsers: User[];\n  // unAuthUsers: User[];\n  // getAuthUsers(selectedAuthorization: boolean) {\n  //   this.userService.getAuthUsers(selectedAuthorization)\n  //     .subscribe(authUsers => this.authUsers = authUsers);\n  // }\n  // getUnAuthUsers(selectedAuthorization: boolean) {\n  //   this.userService.getAuthUsers(selectedAuthorization)\n  //     .subscribe(unAuthUsers => this.unAuthUsers = unAuthUsers)\n  // }\n  addAuthorization(authId: string, uId: User) {\n    console.log(this.selectedAuthUser.authorizedTo)\n    const iterator = this.selectedAuthUser.authorizedTo[Symbol.iterator]();\n    for (const authorizedToo of iterator) {\n      if(authorizedToo.empId === uId.empId) {\n        this._snackBar.openFromComponent(AlreadyAuthComponent, {\n          duration: 3 * 1000,\n        });\n        // alert(\"You have already added authorization for this user\")\n        return;\n      }\n    }\n\n    this.userService.addAuthorization(authId, uId)\n      .subscribe((authUser) => {\n        // this.location.reload()\n        console.log(authUser)\n        this.selectedAuthUser = authUser\n      })\n  }\n\n\n\n}\n\n@Component({\n  selector: 'snack-bar-component-snack',\n  templateUrl: 'snack-bar-component-snack.html',\n  styles: [`\n    .already-auth {\n      color: hotpink;\n    }\n  `],\n})\nexport class AlreadyAuthComponent {}\n","<h1>Authorization</h1>\n\n\n<!-- <div class=\"container\"> -->\n\n<div class='parent flex-parent'>\n  <div class='child flex-child'>\n    <h3>Authorizer</h3>\n    <app-employee-search [selectedAuth]=true [selectedProject]='userService.loggedIn.selectedProject._id' class=\"search-bar left-search\"></app-employee-search>\n  </div>\n  <div class='child flex-child'>\n    <h3>User</h3>\n    <app-employee-search [selectedAuth]=false [selectedProject]='userService.loggedIn.selectedProject._id' class=\"search-bar right-search\"></app-employee-search>\n  </div>\n</div>\n<div class=\"row-card\">\n  <mat-card class=\"user-card\" *ngIf=\"selectedAuthUser\">\n    <mat-card-header class=\"header\">\n      <mat-card-title>Authorizer Details</mat-card-title>\n    </mat-card-header>\n    <mat-card-content>\n      <div class=\"row\">\n        Employee id: {{selectedAuthUser.empId}}\n      </div>\n      <div class=\"row\">\n        Name: {{selectedAuthUser.name}}\n      </div>\n      <div class=\"row\">\n        Deparment: {{selectedAuthUser.selectedDepartment.viewValue}}\n      </div>\n      <div class=\"row\">\n        Grade: {{selectedAuthUser.selectedGrade.viewValue}}\n      </div>\n      <div class=\"row\">\n        Project: {{selectedAuthUser.selectedProject.viewValue}}\n      </div>\n      <div class=\"row\">\n        Authorization: {{selectedAuthUser.selectedAuthorization}}\n      </div>\n      <div class=\"row\">\n        Creation: {{selectedAuthUser.selectedCreation}}\n      </div>\n      <div class=\"row\">\n        Authorized To:\n        <ul *ngFor=\"let ato of selectedAuthUser.authorizedTo\">\n          <li>Employee id: {{ato.empId}}</li>\n        </ul>\n      </div>\n    </mat-card-content>\n  </mat-card>\n\n  <mat-card class=\"user-card\" *ngIf=\"selectedUnAuthUser\">\n    <mat-card-header class=\"header\">\n      <mat-card-title>User Details</mat-card-title>\n    </mat-card-header>\n    <mat-card-content>\n      <div class=\"row\">\n        Employee id: {{selectedUnAuthUser.empId}}\n      </div>\n      <div class=\"row\">\n        Name: {{selectedUnAuthUser.name}}\n      </div>\n      <div class=\"row\">\n        Deparment: {{selectedUnAuthUser.selectedDepartment.viewValue}}\n      </div>\n      <div class=\"row\">\n        Grade: {{selectedUnAuthUser.selectedGrade.viewValue}}\n      </div>\n      <div class=\"row\">\n        Project: {{selectedUnAuthUser.selectedProject.viewValue}}\n      </div>\n      <div class=\"row\">\n        Authorization: {{selectedUnAuthUser.selectedAuthorization}}\n      </div>\n      <div class=\"row\">\n        Creation: {{selectedUnAuthUser.selectedCreation}}\n      </div>\n    </mat-card-content>\n  </mat-card>\n</div>\n\n<div class=\"row-button\">\n  <button mat-raised-button type=\"button\" color=\"accent\"\n    (click)=\"addAuthorization(this.selectedAuthUser._id, this.selectedUnAuthUser)\"\n    *ngIf=\"selectedAuthUser && selectedUnAuthUser\">Add Authorization</button>\n</div>\n<!-- </div> -->\n","<span class=\"already-auth\">\r\n  The Authorizer has already been authorized for this user!\r\n</span>\r\n","import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormControl, Validators } from '@angular/forms';\nimport { UserService } from '../services/user/user.service';\nimport { Item } from '../models/item';\nimport { Router } from '@angular/router';\nimport { ProjectArray } from '../models/projectArray';\nimport { Project } from '../models/project';\n\n// import { Project } from '../project';\n// import { Grade } from '../grade';\n// import { Department } from '../department';\n\n@Component({\n  selector: 'app-admin-data-control',\n  templateUrl: './admin-data-control.component.html',\n  styleUrls: ['./admin-data-control.component.css']\n})\nexport class AdminDataControlComponent implements OnInit {\n\n  editForm;\n  addForm;\n  deleteForm;\n\n  constructor(private fb: FormBuilder, private userService: UserService, private router: Router) {\n    // this.editForm = this.fb.group({\n    //   selectedItem: new FormControl('', Validators.required),\n    //   update: new FormControl('', Validators.required),\n    // });\n    // this.addForm = this.fb.group({\n    //   viewValue: new FormControl('', Validators.required),\n    // });\n    this.deleteForm = this.fb.group({\n      _id: new FormControl('', Validators.required)\n    });\n  }\n\n  ngOnInit(): void {\n  }\n\n  selectedField: string;\n  selectedField2: string;\n  selectedField3: string;\n  fields: string[] = ['Departments', 'Grades', 'Projects', 'Gates', 'Units'];\n\n  // selectedItem: string;\n  items: Item[];\n  items2: Project[];\n  itemsAdd: Item[];\n  itemsDelete: Item[];\n\n  onChange() {\n    if (this.selectedField == this.fields[0]) {\n      this.editForm = this.fb.group({\n        selectedItem: new FormControl('', Validators.required),\n        update: new FormControl('', Validators.required),\n      });\n      this.userService.getDepartments()\n        .subscribe(departments => this.items = departments);\n    }\n    else if (this.selectedField == this.fields[1]) {\n      this.editForm = this.fb.group({\n        selectedItem: new FormControl('', Validators.required),\n        update: new FormControl('', Validators.required),\n      });\n      this.userService.getGrades()\n        .subscribe(grades => this.items = grades);\n    }\n    else if (this.selectedField == this.fields[2]) {\n      this.editForm = this.fb.group({\n        selectedItem: new FormControl('', Validators.required),\n        update: new FormControl('', Validators.required),\n      });\n      this.userService.getProjects()\n        .subscribe(projects => this.items = projects);\n    }\n    else if (this.selectedField == this.fields[3]) {\n      this.editForm = this.fb.group({\n        selectedItem2: new FormControl('', Validators.required),\n        selectedItem: new FormControl('', Validators.required),\n        update: new FormControl('', Validators.required),\n      });\n      this.userService.getProjects()\n        .subscribe(projects => this.items2 = projects);\n    }\n    else if (this.selectedField == this.fields[4]) {\n      this.editForm = this.fb.group({\n        selectedItem: new FormControl('', Validators.required),\n        update: new FormControl('', Validators.required),\n        tolerance: new FormControl('', Validators.required),\n      });\n      this.userService.getUnits()\n        .subscribe(units => this.items = units);\n    }\n  }\n\n  toleranceUpdate(unitId: string) {\n    if(this.selectedField === this.fields[4]) {\n      const unit = this.items.find(item => item._id == unitId);\n      this.editForm.patchValue({\n        tolerance: unit.tolerance\n      });\n    }\n  }\n\n  gateFunc(projectId: string) {\n    const project = this.items2.find(item => item._id == projectId);\n    this.items = project.gates;\n  }\n\n  onChange2() {\n    if (this.selectedField2 == this.fields[3]) {\n      this.addForm = this.fb.group({\n        selectedItem: new FormControl('', Validators.required),\n        viewValue: new FormControl('', Validators.required),\n      });\n      this.userService.getProjects()\n        .subscribe(projects => this.itemsAdd = projects);\n    }\n    else if (this.selectedField2 == this.fields[4]) {\n      this.addForm = this.fb.group({\n        tolerance: new FormControl('', Validators.required),\n        viewValue: new FormControl('', Validators.required),\n      });\n      // this.addForm.addControl('tolerance', this.fb.control('', [Validators.required]));\n    }\n    else {\n      this.addForm = this.fb.group({\n        viewValue: new FormControl('', Validators.required),\n      });\n    }\n  }\n\n  onChange3() {\n    if (this.selectedField3 == this.fields[0]) {\n      this.userService.getDepartments()\n        .subscribe(departments => this.itemsDelete = departments);\n    }\n    else if (this.selectedField3 == this.fields[1]) {\n      this.userService.getGrades()\n        .subscribe(grades => this.itemsDelete = grades);\n    }\n    else if (this.selectedField3 == this.fields[2]) {\n      this.userService.getProjects()\n        .subscribe(projects => this.itemsDelete = projects);\n    }\n  }\n\n\n  onSubmit(editData) {\n    console.log(editData)\n    if (!editData) { return; }\n    else if (editData.selectedItem === '' || editData.selectedItem === null) { return; }\n    else if (this.selectedField == this.fields[0]) {\n      this.userService.updateDepartment(editData as Item)\n        .subscribe((Item) => {\n          this.userService.snackBarMessage(`Department updated: ${Item.viewValue}`)\n          location.reload()\n        });\n    }\n    else if (this.selectedField == this.fields[1]) {\n      this.userService.updateGrade(editData as Item)\n        .subscribe((Item) => {\n          this.userService.snackBarMessage(`Grade updated: ${Item.viewValue}`)\n          location.reload()\n        });\n    }\n    else if (this.selectedField == this.fields[2]) {\n      this.userService.updateProject(editData as Item)\n        .subscribe((Item) => {\n          this.userService.snackBarMessage(`Project updated: ${Item.viewValue}`)\n          location.reload()\n        });\n    }\n    else if (this.selectedField == this.fields[3]) {\n      this.userService.updateGate(editData as Item)\n        .subscribe((Item) => {\n          this.userService.snackBarMessage(`Gate updated: ${Item.viewValue}`)\n          location.reload()\n        });\n    }\n    else {\n      this.userService.updateUnit(editData as Item)\n        .subscribe((Item) => {\n          this.userService.snackBarMessage(`Unit updated: ${Item.viewValue}`)\n          location.reload()\n          // this.router.routeReuseStrategy.shouldReuseRoute = function () {\n          //   return false;\n          // };\n        });\n    }\n  }\n\n  onSubmit2(addData) {\n    if (!addData) {\n      return;\n    }\n    else if (this.selectedField2 == this.fields[0]) {\n      this.userService.addDepartment(addData as Item)\n        .subscribe((Item) => {\n          this.userService.snackBarMessage(`Department added: ${Item.viewValue}`)\n          location.reload()\n        });\n    }\n    else if (this.selectedField2 == this.fields[1]) {\n      this.userService.addGrade(addData as Item)\n        .subscribe((Item) => {\n          this.userService.snackBarMessage(`Grade added: ${Item.viewValue}`)\n          location.reload()\n        });\n    }\n    else if (this.selectedField2 == this.fields[2]) {\n      this.userService.addProject(addData as Item)\n        .subscribe((Item) => {\n          this.userService.snackBarMessage(`Project added: ${Item.viewValue}`)\n          location.reload()\n        });\n    }\n    else if (this.selectedField2 == this.fields[4]) {\n      this.userService.addUnit(addData as Item)\n        .subscribe((Item) => {\n          this.userService.snackBarMessage(`Unit added: ${Item.viewValue}`)\n          location.reload()\n        });\n    }\n    else {\n      this.userService.addGate(addData as Item)\n        .subscribe((Item) => {\n          this.userService.snackBarMessage(`Gate added: ${Item.viewValue}`)\n          location.reload()\n        });\n    }\n  }\n\n  onSubmit3(deleteData) {\n    if (!deleteData) {\n      return;\n    }\n    else if (this.selectedField3 == this.fields[0]) {\n      this.userService.deleteDepartment(deleteData as Item)\n        .subscribe((Item) => {\n          this.userService.snackBarMessage(`Department deleted: ${Item.viewValue}`)\n          location.reload()\n        });\n    }\n    else if (this.selectedField3 == this.fields[1]) {\n      this.userService.deleteGrade(deleteData as Item)\n        .subscribe((Item) => {\n          this.userService.snackBarMessage(`Grade deleted: ${Item.viewValue}`)\n          location.reload()\n        });\n    }\n    else if (this.selectedField3 == this.fields[2]) {\n      this.userService.deleteProject(deleteData as Item)\n        .subscribe((Item) => {\n          this.userService.snackBarMessage(`Project deleted: ${Item.viewValue}`)\n          location.reload()\n        });\n    }\n  }\n\n}\n","<h1>Admin Data Management</h1>\n\n<!-- EDIT DATA -->\n\n<div class=\"row\">\n<mat-card class=\"radio-card\">\n  <label id=\"example-radio-group-label\">Edit data</label>\n  <mat-radio-group aria-labelledby=\"example-radio-group-label\" class=\"example-radio-group\" [(ngModel)]=\"selectedField\"\n    (change)=\"onChange()\">\n    <mat-radio-button class=\"example-radio-button\" *ngFor=\"let field of fields\" [value]=\"field\">\n      {{field}}\n    </mat-radio-button>\n  </mat-radio-group>\n  <!-- <div>You want to edit: {{selectedField}}</div> -->\n</mat-card>\n\n<form *ngIf=\"selectedField\" [formGroup]=\"editForm\" (ngSubmit)=\"onSubmit(editForm.value)\">\n  <mat-card *ngIf=\"selectedField\" class=\"edit-card\">\n    <mat-card-header class=\"header\">\n      <mat-card-title>Edit</mat-card-title>\n    </mat-card-header>\n    <mat-card-content>\n      <mat-form-field class=\"full-width\" *ngIf=\"selectedField === fields[3]\">\n        <mat-label>Select Project</mat-label>\n        <mat-select formControlName=\"selectedItem2\" name=\"item2\" #projectSelect (valueChange)='gateFunc(projectSelect.value)'>\n          <mat-option *ngFor=\"let item of items2\" [value]=\"item._id\">\n            {{ item.viewValue }}\n          </mat-option>\n        </mat-select>\n      </mat-form-field>\n      <mat-form-field class=\"full-width\">\n        <mat-label>{{selectedField}}</mat-label>\n        <mat-select formControlName=\"selectedItem\" name=\"item\" #unitSelect (valueChange)='toleranceUpdate(unitSelect.value)'>\n          <mat-option *ngFor=\"let item of items\" [value]=\"item._id\">\n            {{ item.viewValue }}\n          </mat-option>\n        </mat-select>\n      </mat-form-field>\n      <mat-form-field class=\"full-width\">\n        <input matInput placeholder=\"Update Value\" formControlName=\"update\" type=\"text\" />\n      </mat-form-field>\n      <mat-form-field class=\"full-width\" *ngIf=\"selectedField === fields[4]\">\n        <input matInput placeholder=\"Tolerance\" formControlName=\"tolerance\" type=\"number\" />\n        <span matSuffix>%</span>\n      </mat-form-field>\n      <mat-card-actions class=\"button\">\n        <button mat-raised-button color=\"primary\" type=\"submit\" [disabled]=\"!editForm.valid\">Edit Data</button>\n      </mat-card-actions>\n    </mat-card-content>\n  </mat-card>\n</form>\n</div>\n\n<!-- ADD DATA  -->\n\n<div class=\"row\">\n  <mat-card class=\"radio-card\">\n    <label id=\"example-radio-group-label\">Add data</label>\n    <mat-radio-group aria-labelledby=\"example-radio-group-label\" class=\"example-radio-group\" [(ngModel)]=\"selectedField2\" (change)=\"onChange2()\">\n      <mat-radio-button class=\"example-radio-button\" *ngFor=\"let field of fields\" [value]=\"field\">\n        {{field}}\n      </mat-radio-button>\n    </mat-radio-group>\n  </mat-card>\n\n  <form *ngIf=\"selectedField2\" [formGroup]=\"addForm\" (ngSubmit)=\"onSubmit2(addForm.value)\">\n    <mat-card *ngIf=\"selectedField2\" class=\"edit-card\">\n      <mat-card-header class=\"header\">\n        <mat-card-title>Add</mat-card-title>\n      </mat-card-header>\n      <mat-card-content>\n        <mat-form-field class=\"full-width\" *ngIf=\"selectedField2 === fields[3]\">\n          <mat-label>Select Project</mat-label>\n          <mat-select formControlName=\"selectedItem\" name=\"item\">\n            <mat-option *ngFor=\"let item of itemsAdd\" [value]=\"item._id\">\n              {{ item.viewValue }}\n            </mat-option>\n          </mat-select>\n        </mat-form-field>\n        <mat-form-field class=\"full-width\">\n          <input matInput placeholder=\"Add Value\" formControlName=\"viewValue\" type=\"text\" />\n        </mat-form-field>\n        <mat-form-field class=\"full-width\" *ngIf=\"selectedField2 === fields[4]\">\n          <input matInput placeholder=\"Tolerance\" formControlName=\"tolerance\" type=\"number\" />\n          <span matSuffix>%</span>\n        </mat-form-field>\n        <mat-card-actions class=\"button\">\n          <button mat-raised-button color=\"primary\" type=\"submit\" [disabled]=\"!addForm.valid\">Add Data</button>\n        </mat-card-actions>\n      </mat-card-content>\n    </mat-card>\n  </form>\n  </div>\n\n  <!-- DELETE DATA  -->\n\n  <div class=\"row\">\n    <mat-card class=\"radio-card\">\n      <label id=\"example-radio-group-label\">Delete data</label>\n      <mat-radio-group aria-labelledby=\"example-radio-group-label\" class=\"example-radio-group\" [(ngModel)]=\"selectedField3\"\n        (change)=\"onChange3()\">\n        <mat-radio-button class=\"example-radio-button\" *ngFor=\"let field of fields\" [value]=\"field\">\n          {{field}}\n        </mat-radio-button>\n      </mat-radio-group>\n      <!-- <div>You want to edit: {{selectedField}}</div> -->\n    </mat-card>\n\n    <form *ngIf=\"selectedField3\" [formGroup]=\"deleteForm\" (ngSubmit)=\"onSubmit3(deleteForm.value)\">\n      <mat-card *ngIf=\"selectedField3\" class=\"edit-card\">\n        <mat-card-header class=\"header\">\n          <mat-card-title>Delete</mat-card-title>\n        </mat-card-header>\n        <mat-card-content>\n          <mat-form-field class=\"full-width\">\n            <mat-label>{{selectedField3}}</mat-label>\n            <mat-select formControlName=\"_id\" name=\"item\">\n              <mat-option *ngFor=\"let item of itemsDelete\" [value]=\"item._id\">\n                {{ item.viewValue }}\n              </mat-option>\n            </mat-select>\n          </mat-form-field>\n          <mat-card-actions class=\"button\">\n            <button mat-raised-button color=\"primary\" type=\"submit\" [disabled]=\"!deleteForm.valid\">Delete Data</button>\n          </mat-card-actions>\n        </mat-card-content>\n      </mat-card>\n    </form>\n    </div>\n","import { trigger, sequence, state, animate, transition, style } from '@angular/animations';\r\n\r\nexport const rowsAnimation =\r\n    trigger('rowsAnimation', [\r\n      transition('void => *', [\r\n        style({ height: '*', opacity: '0', transform: 'translateX(-550px)', 'box-shadow': 'none' }),\r\n        sequence([\r\n          animate(\".35s ease\", style({ height: '*', opacity: '.2', transform: 'translateX(0)', 'box-shadow': 'none'  })),\r\n          animate(\".35s ease\", style({ height: '*', opacity: 1, transform: 'translateX(0)' }))\r\n        ])\r\n      ])\r\n    ]);\r\n","import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { LoginComponent } from './login/login.component';\nimport { RegisterComponent } from './register/register.component';\nimport { HomeComponent } from './home/home.component';\nimport { AdminDataControlComponent } from './admin-data-control/admin-data-control.component';\nimport { GatePassComponent } from './gate-pass/gate-pass.component';\nimport { ReportComponent } from './report/report.component';\nimport { AdminAuthorizationComponent } from './admin-authorization/admin-authorization.component';\nimport { FilterGatePassComponent } from './filter-gate-pass/filter-gate-pass.component';\nimport { ReturnComponent } from './return/return.component';\nimport { ProfileComponent } from './profile/profile.component';\nimport { PageNotFoundComponent } from './page-not-found/page-not-found.component';\nimport { AuthGuard } from './guards/auth.guard';\nimport { LoginGuard } from './guards/login.guard';\nimport { RoleGuard } from './guards/role.guard';\nimport { CreateGuard } from './guards/create.guard';\nimport { SuperAdminGuard } from './guards/super-admin.guard';\nimport { AuthorizeGuard } from './guards/authorize.guard'\nimport { InboxComponent } from './inbox/inbox.component';\n\nconst routes: Routes = [\n  { path: '', redirectTo: 'login', pathMatch: 'full' },\n  { path: 'login', component: LoginComponent, canActivate: [LoginGuard] },\n  { path: 'register', component: RegisterComponent, canActivate: [LoginGuard] },\n  { path: 'home', component: HomeComponent, canActivate: [AuthGuard] },\n  { path: 'gatepass', component: GatePassComponent, canActivate: [AuthGuard, CreateGuard] },\n  { path: 'admin/data-control', component: AdminDataControlComponent, canActivate: [AuthGuard, SuperAdminGuard] },\n  { path: 'admin/authorization', component: AdminAuthorizationComponent, canActivate: [AuthGuard, RoleGuard] },\n  { path: 'report', component: ReportComponent, canActivate: [AuthGuard] },\n  { path: 'filter', component: FilterGatePassComponent, canActivate: [AuthGuard] },\n  { path: 'return', component: ReturnComponent, canActivate: [AuthGuard] },\n  { path: 'profile', component: ProfileComponent, canActivate: [AuthGuard] },\n  { path: 'inbox', component: InboxComponent, canActivate: [AuthGuard, AuthorizeGuard] },\n  { path: '**', component: PageNotFoundComponent, canActivate: [AuthGuard] }\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\n\nexport class AppRoutingModule {}\n","import { Component, Inject } from '@angular/core';\nimport { UserService } from './services/user/user.service';\nimport { MatDialog, MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { Router } from '@angular/router';\n\nexport interface DialogData {\n  project: string;\n}\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  title = 'Gate Pass';\n  constructor(public userService: UserService, public dialog: MatDialog, private router: Router) {\n  }\n  // loggedIn = this.userService.loggedIn;\n  logOut() {\n    console.log('logOut')\n    this.userService.logOutUser()\n      .subscribe(() => this.router.navigate(['login']))\n  }\n\n  print() {\n    const dialogRef = this.dialog.open(DialogContentPrint, {\n      data: {\n        project: this.userService.loggedIn.selectedProject._id\n      }\n    });\n    dialogRef.afterClosed().subscribe(result => {\n      // console.log(`Dialog result: ${result}`);\n\n    });\n\n  }\n}\n\n@Component({\n  selector: 'dialog-content-print',\n  templateUrl: 'dialog-content-print.html',\n})\nexport class DialogContentPrint {\n  constructor(@Inject (MAT_DIALOG_DATA) public data: DialogData) { }\n}\n\n@Component({\n  selector: 'snack-bar-component-message',\n  templateUrl: 'snack-bar-component-message.html',\n  styles: [`\n    .example-pizza-party {\n      color: hotpink;\n    }\n  `],\n})\nexport class MessageSnackComponent { }\n","<mat-toolbar color=\"primary\">\n  <span> {{ title }} </span>\n  <span class=\"example-fill-remaining-space\"></span>\n  <div *ngIf=\"userService.loggedIn\">\n    <button mat-icon-button class=\"toolbar-btn\" routerLink=\"home\" matTooltip=\"Home\">\n      <mat-icon>home</mat-icon>\n    </button>\n    <button mat-icon-button class=\"toolbar-btn\" *ngIf=\"userService.loggedIn.selectedUserType != 'Security'\" routerLink=\"gatepass\" matTooltip=\"Create Gate Pass\">\n      <mat-icon>create</mat-icon>\n    </button>\n    <button mat-icon-button class=\"toolbar-btn\" (click)=\"print()\" matTooltip=\"Print Gate Pass\">\n      <mat-icon>print</mat-icon>\n    </button>\n    <button mat-icon-button class=\"toolbar-btn\" routerLink=\"filter\" matTooltip=\"Reports\">\n      <mat-icon>list</mat-icon>\n    </button>\n    <button mat-icon-button class=\"toolbar-btn\" routerLink=\"admin/authorization\" *ngIf=\"userService.loggedIn.selectedUserType === 'Admin' || userService.loggedIn.selectedUserType === 'Super Admin'\" matTooltip=\"Authorization\">\n      <mat-icon>admin_panel_settings</mat-icon>\n    </button>\n    <button mat-icon-button class=\"toolbar-btn\" routerLink=\"inbox\" *ngIf=\"userService.loggedIn.selectedUserType === 'Admin' || userService.loggedIn.selectedUserType === 'Super Admin'\" matTooltip=\"Inbox\">\n      <mat-icon>inbox</mat-icon>\n    </button>\n    <button mat-icon-button class=\"toolbar-btn\" routerLink=\"admin/data-control\" *ngIf=\"userService.loggedIn.selectedUserType === 'Super Admin'\" matTooltip=\"Data Management\">\n      <mat-icon>build</mat-icon>\n    </button>\n    <button mat-icon-button class=\"toolbar-btn\" routerLink=\"profile\" matTooltip=\"Profile\">\n      <mat-icon>account_circle</mat-icon>\n    </button>\n    <button mat-icon-button class=\"toolbar-btn\" (click)=\"logOut()\" routerLink=\"login\" matTooltip=\"Logout\">\n      <mat-icon>exit_to_app</mat-icon>\n    </button>\n  </div>\n  <span><img src=\"../assets/NTPC_Logo.png\" class=\"image\"></span>\n</mat-toolbar>\n<router-outlet></router-outlet>\n<div class=\"footer\">\n  <!-- <div class=\"container\">\n    <div class=\"content has-text-centered\"> -->\n      <p>\n        Made with ❤️ by <a class=\"github\" href=\"https://github.com/PrateekUpd\" target=\"_blank\">Prateek Upadhyay</a>\n      </p>\n    <!-- </div>\n  </div> -->\n</div>\n<!-- <app-messages></app-messages> -->\n","<h2 mat-dialog-title>Print Gate Pass</h2>\r\n<mat-dialog-content class=\"mat-typography\">\r\n<app-gatepass-search [print]=\"'1'\" [project]='data.project'></app-gatepass-search>\r\n</mat-dialog-content>\r\n<mat-dialog-actions align=\"end\">\r\n  <button mat-button mat-dialog-close>Cancel</button>\r\n</mat-dialog-actions>\r\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\n\nimport { AppComponent, DialogContentPrint } from './app.component';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { HttpClientModule, HTTP_INTERCEPTORS } from '@angular/common/http';\n\nimport { MatSliderModule } from '@angular/material/slider';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatInputModule } from '@angular/material/input';\nimport {MatButtonModule} from '@angular/material/button';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatGridListModule } from '@angular/material/grid-list';\nimport { MatTableModule } from '@angular/material/table';\nimport { MatRadioModule } from '@angular/material/radio';\nimport { MatPaginatorModule } from '@angular/material/paginator';\nimport { MatSortModule } from '@angular/material/sort';\nimport { MatDatepickerModule } from '@angular/material/datepicker';\nimport { MatExpansionModule } from '@angular/material/expansion';\n\nimport { LoginComponent } from './login/login.component';\nimport { RegisterComponent } from './register/register.component';\nimport { MessagesComponent } from './messages/messages.component';\nimport { AppRoutingModule } from './app-routing.module';\nimport { HomeComponent } from './home/home.component';\nimport { FormsModule } from '@angular/forms';\nimport { AdminDataControlComponent } from './admin-data-control/admin-data-control.component';\nimport { MatNativeDateModule } from '@angular/material/core';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { GatePassComponent, GpCreatedComponent } from './gate-pass/gate-pass.component';\nimport { ReportComponent } from './report/report.component';\nimport { MatDialogModule } from '@angular/material/dialog';\nimport { AdminAuthorizationComponent, AlreadyAuthComponent } from './admin-authorization/admin-authorization.component';\nimport { EmployeeSearchComponent } from './employee-search/employee-search.component';\nimport { MatAutocompleteModule } from '@angular/material/autocomplete';\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\nimport {MatIconModule} from '@angular/material/icon';\nimport { FilterGatePassComponent } from './filter-gate-pass/filter-gate-pass.component';\nimport {MatTooltipModule} from '@angular/material/tooltip';\nimport { ReturnComponent, DialogContentReturn, ReturnSnackComponent } from './return/return.component';\nimport { GatepassSearchComponent } from './gatepass-search/gatepass-search.component';\nimport {MatCheckboxModule} from '@angular/material/checkbox';\nimport { CdkColumnDef, CdkTableModule, NoDataRowOutlet, CdkNoDataRow } from '@angular/cdk/table';\nimport { ProfileComponent, DialogContentHome, UserEditedComponent } from './profile/profile.component';\nimport { MatTableExporterModule } from 'mat-table-exporter';\nimport {MatStepperModule} from '@angular/material/stepper';\nimport { PageNotFoundComponent } from './page-not-found/page-not-found.component';\nimport { TokenInterceptor } from './token.interceptor';\nimport { QuantityRetValidatorDirective } from './quantity-ret-validator.directive';\nimport { InboxComponent } from './inbox/inbox.component';\n// import {MAT_FORM_FIELD_DEFAULT_OPTIONS} from '@angular/material/form-field';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    LoginComponent,\n    RegisterComponent,\n    MessagesComponent,\n    HomeComponent,\n    AdminDataControlComponent,\n    GatePassComponent,\n    ReportComponent,\n    DialogContentReturn,\n    DialogContentPrint,\n    DialogContentHome,\n    AdminAuthorizationComponent,\n    EmployeeSearchComponent,\n    AlreadyAuthComponent,\n    FilterGatePassComponent,\n    ReturnComponent,\n    GatepassSearchComponent,\n    UserEditedComponent,\n    GpCreatedComponent,\n    ReturnSnackComponent,\n    ProfileComponent,\n    PageNotFoundComponent,\n    QuantityRetValidatorDirective,\n    InboxComponent,\n  ],\n  entryComponents: [\n    ReportComponent,\n    AlreadyAuthComponent,\n    FilterGatePassComponent,\n    DialogContentReturn,\n    DialogContentPrint,\n    DialogContentHome,\n    UserEditedComponent,\n    GpCreatedComponent,\n    ReturnSnackComponent\n  ],\n  imports: [\n    BrowserModule,\n    BrowserAnimationsModule,\n    HttpClientModule,\n    MatSliderModule,\n    ReactiveFormsModule,\n    MatCardModule,\n    MatInputModule,\n    MatButtonModule,\n    MatToolbarModule,\n    MatSelectModule,\n    MatGridListModule,\n    AppRoutingModule,\n    FormsModule,\n    MatTableModule,\n    MatRadioModule,\n    MatPaginatorModule,\n    MatSortModule,\n    MatDatepickerModule,\n    MatNativeDateModule,\n    MatFormFieldModule,\n    MatPaginatorModule,\n    MatExpansionModule,\n    MatDialogModule,\n    MatAutocompleteModule,\n    MatSnackBarModule,\n    MatIconModule,\n    MatTooltipModule,\n    MatCheckboxModule,\n    MatTableModule,\n    MatTableExporterModule,\n    MatStepperModule\n  ],\n  providers: [\n    // { provide: MAT_FORM_FIELD_DEFAULT_OPTIONS, useValue: { appearance: 'fill' } },\n    CdkColumnDef,\n    CdkTableModule,\n    NoDataRowOutlet,\n    {\n      provide: HTTP_INTERCEPTORS,\n      useClass: TokenInterceptor,\n      multi: true\n    },\n  ],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { Component, OnInit, Input } from '@angular/core';\nimport { Observable, Subject } from 'rxjs';\nimport { User } from '../models/user';\nimport {\n   debounceTime, distinctUntilChanged, switchMap\n } from 'rxjs/operators';\nimport { UserService } from '../services/user/user.service';\nimport { AdminAuthorizationComponent } from '../admin-authorization/admin-authorization.component';\n\n@Component({\n  selector: 'app-employee-search',\n  templateUrl: './employee-search.component.html',\n  styleUrls: ['./employee-search.component.css']\n})\n\nexport class EmployeeSearchComponent implements OnInit {\n\n  users$: Observable<User[]>;\n  private searchTerms = new Subject<string>();\n  @Input() selectedAuth: boolean;\n  @Input() selectedCreation: boolean;\n  @Input() selectedProject: string;\n  constructor(private userService: UserService, private adminAuth: AdminAuthorizationComponent) { }\n\n  search(term: string): void {\n    this.searchTerms.next(term);\n  }\n\n  ngOnInit(): void {\n    this.users$ = this.searchTerms.pipe(\n      // wait 300ms after each keystroke before considering the term\n      debounceTime(300),\n\n      // ignore new term if same as previous term\n      distinctUntilChanged(),\n\n      // switch to new search observable each time the term changes\n      switchMap((term: string) => this.userService.searchUsers(term, this.selectedAuth, this.selectedProject)),\n\n    );\n    // this.userFunc();\n  }\n\n\n  selectFunc(user: User) {\n    if(this.selectedAuth) {\n      this.adminAuth.selectedAuthUser = user\n    }\n    else {\n      this.adminAuth.selectedUnAuthUser = user\n    }\n  }\n}\n","<!-- <div id=\"search-component\">\n  <h4><label for=\"search-box\">Employee Search</label></h4>\n\n  <input #searchBox id=\"search-box\" (input)=\"search(searchBox.value)\" />\n\n  <ul class=\"search-result\">\n    <li *ngFor=\"let user of users$ | async\">\n      <a routerLink=\"/detail/{{user._id}}\">\n        {{user.empId}} {{user.name}}\n      </a>\n    </li>\n  </ul>\n</div> -->\n<mat-form-field appearance=\"standard\">\n  <mat-label>Employee Search</mat-label>\n  <input matInput type=\"text\" placeholder=\"Search By Emp Name\" #searchBox aria-label=\"Number\" matInput [matAutocomplete]=\"auto\"\n    (input)=\"search(searchBox.value)\">\n  <mat-autocomplete autoActiveFirstOption #auto=\"matAutocomplete\">\n    <mat-option *ngFor=\"let user of users$ | async\" [value]=\"user.name\" (onSelectionChange)=\"selectFunc(user)\">\n      {{user.empId}} {{user.name}} {{user.selectedDepartment.viewValue}} {{user.selectedGrade.viewValue}}\n    </mat-option>\n  </mat-autocomplete>\n</mat-form-field>\n","import { Component, OnInit } from '@angular/core';\nimport { FormGroup, FormBuilder, FormControl, Validators } from '@angular/forms';\nimport { UserService } from '../services/user/user.service';\nimport { Router } from '@angular/router';\n\n@Component({\n  selector: 'app-filter-gate-pass',\n  templateUrl: './filter-gate-pass.component.html',\n  styleUrls: ['./filter-gate-pass.component.css']\n})\nexport class FilterGatePassComponent implements OnInit {\n\n  filterForm: FormGroup;\n\n  constructor(public userService: UserService, private fb: FormBuilder, private router: Router) {\n    this.filterForm = this.fb.group({\n      selectedDepartment: new FormControl('', Validators.required),\n      selectedType: new FormControl('', Validators.required),\n      selectedOwner: new FormControl('', Validators.required),\n      selectedMovement: new FormControl('', Validators.required),\n      from: new FormControl('', Validators.compose([Validators.required])),\n      to: new FormControl('', Validators.required),\n      selectedProject: new FormControl(this.userService.loggedIn.selectedProject._id)\n    });\n\n   }\n\n  ngOnInit(): void {\n  }\n\n  onSubmit(filterForm) {\n    if(filterForm.selectedDepartment === 'Own Department') {\n    filterForm.selectedDepartment = this.userService.loggedIn.selectedDepartment._id;\n    }\n    console.log(filterForm);\n    this.userService.getFilterGpArray( filterForm )\n      .subscribe((gpArrays) => {\n        this.userService.gpArrays = gpArrays;\n        this.router.navigate(['report']);\n      })\n  }\n\n}\n","<div class=\"search-div\">\n<app-gatepass-search [project]='userService.loggedIn.selectedProject._id' [print]=\"'0'\"></app-gatepass-search>\n</div>\n<h3>OR</h3>\n<hr>\n<div class=\"filter-div\">\n<form [formGroup]=\"filterForm\" (ngSubmit)=\"onSubmit(filterForm.value)\">\n<mat-card class=\"filter-card\">\n  <mat-card-header>\n    <mat-card-title>Filter</mat-card-title>\n  </mat-card-header>\n  <mat-card-content>\n    <div>\n      <mat-form-field class=\"full-width\">\n        <mat-label>Department</mat-label>\n        <mat-select formControlName=\"selectedDepartment\">\n          <mat-option value=\"Own Department\">Own Department</mat-option>\n          <mat-option value=\"All\">All</mat-option>\n        </mat-select>\n      </mat-form-field>\n    </div>\n    <div>\n      <mat-form-field class=\"full-width\">\n        <mat-label>Type</mat-label>\n        <mat-select formControlName=\"selectedType\">\n          <mat-option value=\"Returnable\">Returnable</mat-option>\n          <mat-option value=\"Non-Returnable\">Non-Returnable</mat-option>\n          <mat-option value=\"Pending Returnable\">Pending Returnable</mat-option>\n          <mat-option value=\"All\">All</mat-option>\n        </mat-select>\n      </mat-form-field>\n    </div>\n    <div>\n      <mat-form-field class=\"full-width\">\n        <mat-label>Owner</mat-label>\n        <mat-select formControlName=\"selectedOwner\">\n          <mat-option value=\"NTPC\">NTPC</mat-option>\n          <mat-option value=\"Vendor\">Vendor</mat-option>\n          <mat-option value=\"All\">All</mat-option>\n        </mat-select>\n      </mat-form-field>\n    </div>\n    <div>\n      <mat-form-field class=\"full-width\">\n        <mat-label>Movement</mat-label>\n        <mat-select formControlName=\"selectedMovement\">\n          <mat-option value=\"In\">In</mat-option>\n          <mat-option value=\"Out\">Out</mat-option>\n          <mat-option value=\"Within\">Within</mat-option>\n          <mat-option value=\"All\">All</mat-option>\n        </mat-select>\n      </mat-form-field>\n    </div>\n\n    <div>\n      <mat-form-field>\n        <mat-label>Enter a date range</mat-label>\n        <mat-date-range-input [rangePicker]=\"picker\">\n          <input matStartDate formControlName=\"from\" placeholder=\"Start date\">\n          <input matEndDate formControlName=\"to\" placeholder=\"End date\">\n        </mat-date-range-input>\n        <mat-datepicker-toggle matSuffix [for]=\"picker\"></mat-datepicker-toggle>\n        <mat-date-range-picker #picker></mat-date-range-picker>\n\n        <!-- <mat-error *ngIf=\"range.controls.start.hasError('matStartDateInvalid')\">Invalid start date</mat-error>\n        <mat-error *ngIf=\"range.controls.end.hasError('matEndDateInvalid')\">Invalid end date</mat-error> -->\n      </mat-form-field>\n    </div>\n\n    <!-- <div>\n      <mat-form-field>\n        <mat-label>From</mat-label>\n        <input matInput [matDatepicker]=\"picker1\" formControlName=\"from\">\n        <mat-datepicker-toggle matSuffix [for]=\"picker1\"></mat-datepicker-toggle>\n        <mat-datepicker #picker1></mat-datepicker>\n      </mat-form-field>\n    </div>\n\n    <div>\n      <mat-form-field>\n        <mat-label>To</mat-label>\n        <input matInput [matDatepicker]=\"picker2\" formControlName=\"to\">\n        <mat-datepicker-toggle matSuffix [for]=\"picker2\"></mat-datepicker-toggle>\n        <mat-datepicker #picker2></mat-datepicker>\n      </mat-form-field>\n    </div> -->\n\n  </mat-card-content>\n  <mat-card-actions class=\"filter-card-button\">\n    <button mat-icon-button color=\"accent\" [disabled]=\"!filterForm.valid\">\n      <mat-icon>filter_alt</mat-icon>\n    </button>\n  </mat-card-actions>\n</mat-card>\n</form>\n</div>\n","import { Component, OnInit, ViewChild } from '@angular/core';\nimport { rowsAnimation } from '../animations/template.animations';\nimport { FormBuilder, FormControl, FormGroup, FormArray, Validators, NgForm } from '@angular/forms';\nimport { UserService } from '../services/user/user.service';\nimport { MatTableDataSource } from '@angular/material/table';\nimport { MaterialGatePass } from '../models/gatePass';\nimport { Department } from '../models/department';\nimport { GpArray } from '../models/gpArray'\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { Router } from '@angular/router';\nimport { Create } from '../models/create';\nimport { Gate } from '../models/gate';\nimport { Unit } from '../models/unit';\nimport { Project } from '../models/project';\n\ninterface Type {\n  viewValue: string;\n}\ninterface Owner {\n  viewValue: string;\n}\ninterface Movement {\n  viewValue: string;\n}\n// interface Gate {\n//   viewValue: string;\n// }\n\n@Component({\n  selector: 'app-gate-pass',\n  templateUrl: './gate-pass.component.html',\n  styleUrls: ['./gate-pass.component.css'],\n  animations: [rowsAnimation]\n})\nexport class GatePassComponent implements OnInit {\n\n\n  createForm: Create = {\n    name: this.userService.loggedIn.name,\n    selectedGate: null,\n    selectedDepartment: this.userService.loggedIn.selectedDepartment,\n    selectedProject: this.userService.loggedIn.selectedProject,\n    selectedType: null,\n    selectedOwner: null,\n    selectedMovement: null,\n    receiver: null,\n    firm: null,\n    vendorName: null,\n  };\n\n  dcGatePass = ['sno', 'modeOfTransport', 'description', 'quantity', 'unit', 'issuedTo', 'from', 'to', 'reason', 'remark', 'dateOfReturn'];\n  dsGatePass: MatTableDataSource<MaterialGatePass>;\n  gatePasses: MaterialGatePass[] = [];\n\n  // gatePassForm;\n  constructor(private userService: UserService, private fb: FormBuilder, private _snackBar: MatSnackBar, private router: Router) {\n    // this.gatePasses.push(this.createNewGatePass(1));\n    this.dsGatePass = new MatTableDataSource(this.gatePasses);\n    // this.gatePassForm = this.fb.group({\n    //   selectedGate: new FormControl('', Validators.required),\n    //   selectedType: new FormControl('', Validators.required),\n    //   selectedOwner: new FormControl('', Validators.required),\n    //   selectedMovement: new FormControl('', Validators.required),\n    //   receiver: new FormControl('', Validators.required),\n    //   firm: new FormControl('', Validators.required),\n    //   sno: new FormControl('', Validators.required),\n    //   modeOfTransport: new FormControl('', Validators.required),\n    //   description: new FormControl('', Validators.required),\n    //   quantity: new FormControl('', Validators.required),\n    //   unit: new FormControl('', Validators.required),\n    //   issuedTo: new FormControl('', Validators.required),\n    //   from: new FormControl('', Validators.required),\n    //   to: new FormControl('', Validators.required),\n    //   reason: new FormControl('', Validators.required),\n    //   remark: new FormControl('', Validators.required),\n    //   dateOfReturn: new FormControl('', Validators.required),\n    // })\n  }\n\n  ngOnInit(): void {\n    this.gatePasses.push(this.createNewGatePass(1));\n    this.getProjects();\n    this.getDepartments();\n    this.getUnits();\n    // this.disableInput();\n  }\n\n  setGates() {\n    const selectedProject = this.projects.find(project => project._id = this.userService.loggedIn.selectedProject._id)\n    this.gates = selectedProject.gates\n  }\n\n  // disableInput() {\n  //   this.createForm.get('name').disable();\n  // }\n  selectedUnit: string;\n  selectedType: string;\n  selectedOwner: string;\n  selectedMovement: string;\n  selectedGate: string;\n  selectedDepartment: string;\n\n  types: Type[] = [\n    { viewValue: 'Returnable' },\n    { viewValue: 'Non-Returnable' },\n  ];\n  owners: Owner[] = [\n    { viewValue: 'NTPC' },\n    { viewValue: 'Vendor' },\n  ];\n  movements: Movement[] = [\n    { viewValue: 'In' },\n    { viewValue: 'Out' },\n    { viewValue: 'Within' },\n  ];\n  // gates: Gate[] = [\n  //   { viewValue: 'Gate No. 1' },\n  //   { viewValue: 'Gate No. 2' },\n  //   { viewValue: 'Gate No. 3' },\n  // ];\n\n  Units: Unit[];\n  departments: Department[];\n  gates: Gate[];\n  projects: Project[];\n\n  getDepartments() {\n    this.userService.getDepartments()\n      .subscribe(departments => this.departments = departments);\n  }\n\n  getUnits() {\n    this.userService.getUnits()\n      .subscribe(units => this.Units = units);\n  }\n\n  getProjects() {\n    this.userService.getProjects()\n      .subscribe(projects => {\n        this.projects = projects;\n        this.setGates();\n      })\n  }\n\n  dcDate;\n  dateFunc(value) {\n    console.log(value)\n    // this.createForm.controls.selectedType.value\n    for (const dc of this.dcGatePass) {\n      if (dc == \"dateOfReturn\") {\n        this.dcDate = true;\n        break;\n      }\n      else {\n        this.dcDate = false;\n      }\n    }\n    if (value === \"Non-Returnable\" && this.dcDate === true) {\n      this.dcGatePass.pop();\n      this.gatePasses.forEach(gatePass => {\n        gatePass.dateOfReturn = null;\n      })\n    }\n    else if (value === \"Returnable\" && this.dcDate === false) {\n      this.dcGatePass.push('dateOfReturn');\n    }\n\n  }\n\n  createNewGatePass(sno: number): MaterialGatePass {\n    return {\n      sno: sno,\n      modeOfTransport: null, description: null, quantity: null, unit: null,\n      issuedTo: null, dateOfReturn: null, from: null,\n      to: null, reason: null, remark: null, incomingRef: null\n    };\n  }\n\n  addRow() {\n    this.dsGatePass.data.push(this.createNewGatePass(this.dsGatePass.data.length + 1));\n    this.dsGatePass.filter = \"\";\n  }\n\n  deleteRow() {\n    if (this.dsGatePass.data.length == 1) {\n      return;\n    }\n    this.dsGatePass.data.pop();\n    this.dsGatePass.filter = \"\";\n  }\n\n  gpArray: GpArray = { gatePassNo: 0, createForm: null, createdBy: null, authorized: null, authorizedDate: null, status: 'Created', gatePass: [] }\n  onSubmitFunc() {\n    if (this.gatePasses === [] || !this.createForm) {\n      alert(\"Please fill all the fields\");\n    }\n    else {\n      this.gpArray.createForm = this.createForm\n      this.gpArray.gatePass = this.gatePasses\n      this.gpArray.createdBy = this.userService.loggedIn\n      this.userService.addGpArray(this.gpArray as GpArray)\n        .subscribe((gpArray) => {\n          // alert(\"Form Submitted\")\n          this._snackBar.openFromComponent(GpCreatedComponent, {\n            duration: 3 * 1000,\n          });\n          this.userService.selectedGpArray = gpArray;\n          this.userService.storeGpArray(gpArray.gatePassNo);\n          this.router.navigate(['return']);\n        })\n      console.log(this.gpArray)\n    }\n  }\n\n}\n// authorized:{_id: null, name: null, empId:null, password: null, selectedProject: null, selectedGrade: null, selectedDepartment: null, selectedAuthorization:null, selectedCreation: null }\n\n@Component({\n  selector: 'snack-bar-component-gpCreated',\n  templateUrl: 'snack-bar-component-gpCreated.html',\n  styles: [`\n    .gp-created {\n      color: hotpink;\n    }\n  `],\n})\nexport class GpCreatedComponent { }\n","<h1>Material Gate Pass Creation Form</h1>\n<form #myForm=\"ngForm\">\n<!-- <form [formGroup]=\"createForm\" (ngSubmit)=\"onSubmitFunc(createForm.value)\"> -->\n  <mat-card class=\"mat-elevation-z8 create-card\">\n    <mat-grid-list cols=\"5\" rowHeight=\"5:1\">\n      <!-- <fieldset [disabled]='true'> -->\n        <mat-grid-tile>\n          <mat-form-field appearance=\"standard\">\n            <mat-label>Name</mat-label>\n            <input matInput [disabled]=\"true\" [(ngModel)]=\"createForm.name\" placeholder=\"Name\" name=\"name\" />\n          </mat-form-field>\n        </mat-grid-tile>\n      <!-- </fieldset> -->\n\n      <mat-grid-tile>\n        <mat-form-field>\n          <mat-label>Department</mat-label>\n          <mat-select [(ngModel)]=\"createForm.selectedDepartment._id\" name=\"department\" [disabled]=\"true\" >\n            <mat-option *ngFor=\"let department of departments\" [value]=\"department._id\">\n              {{ department.viewValue }}\n            </mat-option>\n          </mat-select>\n        </mat-form-field>\n      </mat-grid-tile>\n\n      <mat-grid-tile>\n        <mat-form-field>\n          <mat-label>Project</mat-label>\n          <mat-select [(ngModel)]=\"createForm.selectedProject._id\" name=\"project\" [disabled]=\"true\" >\n            <mat-option *ngFor=\"let project of projects\" [value]=\"project._id\">\n              {{ project.viewValue }}\n            </mat-option>\n          </mat-select>\n        </mat-form-field>\n      </mat-grid-tile>\n\n      <mat-grid-tile>\n        <mat-form-field>\n          <mat-label>Type</mat-label>\n          <mat-select [(ngModel)]=\"createForm.selectedType\" name=\"type\" #typeSelect (valueChange)='dateFunc(typeSelect.value)' required>\n            <mat-option *ngFor=\"let type of types\" [value]=\"type.viewValue\">\n              {{ type.viewValue }}\n            </mat-option>\n          </mat-select>\n        </mat-form-field>\n      </mat-grid-tile>\n\n      <mat-grid-tile>\n        <mat-form-field>\n          <mat-label>Owner</mat-label>\n          <mat-select [(ngModel)]=\"createForm.selectedOwner\" name=\"owner\" required>\n            <mat-option *ngFor=\"let owner of owners\" [value]=\"owner.viewValue\">\n              {{ owner.viewValue }}\n            </mat-option>\n          </mat-select>\n        </mat-form-field>\n      </mat-grid-tile>\n\n      <mat-grid-tile>\n        <mat-form-field>\n          <mat-label>Movement</mat-label>\n          <mat-select [(ngModel)]=\"createForm.selectedMovement\" name=\"movement\" required>\n            <mat-option *ngFor=\"let movement of movements\" [value]=\"movement.viewValue\">\n              {{ movement.viewValue }}\n            </mat-option>\n          </mat-select>\n        </mat-form-field>\n      </mat-grid-tile>\n      <mat-grid-tile>\n        <mat-form-field>\n          <mat-label>Gate</mat-label>\n          <mat-select [(ngModel)]=\"createForm.selectedGate\" name=\"gate\" required>\n            <mat-option *ngFor=\"let gate of gates\" [value]=\"gate._id\">\n              {{ gate.viewValue }}\n            </mat-option>\n          </mat-select>\n        </mat-form-field>\n      </mat-grid-tile>\n      <mat-grid-tile>\n        <mat-form-field appearance=\"standard\">\n          <mat-label>Receiver</mat-label>\n          <input matInput [(ngModel)]=\"createForm.receiver\" placeholder=\"Receiver\" name=\"receiver\" required/>\n        </mat-form-field>\n      </mat-grid-tile>\n\n      <mat-grid-tile>\n        <mat-form-field appearance=\"standard\">\n          <mat-label>Firm Represented</mat-label>\n          <input matInput [(ngModel)]=\"createForm.firm\" placeholder=\"Firm Represented\" name=\"firm\" required/>\n        </mat-form-field>\n      </mat-grid-tile>\n\n      <mat-grid-tile *ngIf=\"createForm.selectedOwner == owners[1].viewValue\">\n        <mat-form-field appearance=\"standard\">\n          <mat-label>Vendor Name</mat-label>\n          <input matInput [(ngModel)]=\"createForm.vendorName\" placeholder=\"Vendor Name\" name=\"vendor\" required/>\n        </mat-form-field>\n      </mat-grid-tile>\n\n    </mat-grid-list>\n  </mat-card>\n  <button mat-raised-button color=\"primary\" type=\"submit\" (click)=\"onSubmitFunc()\" [disabled]=\"myForm.invalid\" class=\"general-button\">Submit</button>\n\n\n<div class=\"row-button\">\n  <button mat-raised-button type=\"button\" (click)=\"addRow()\">Add row</button>\n  <button mat-raised-button type=\"button\" (click)=\"deleteRow()\" [disabled]=\"gatePasses.length == 1\">Delete row</button>\n</div>\n<div class=\"example-container mat-elevation-z8\">\n  <mat-table [dataSource]=\"dsGatePass\">\n\n    <ng-container matColumnDef=\"sno\">\n      <mat-header-cell *matHeaderCellDef> SNo. </mat-header-cell>\n      <mat-cell *matCellDef=\"let element\" class=\"first\">\n        {{element.sno}}\n      </mat-cell>\n    </ng-container>\n\n    <ng-container matColumnDef=\"modeOfTransport\">\n      <mat-header-cell *matHeaderCellDef> Mode Of Transport </mat-header-cell>\n      <mat-cell *matCellDef=\"let element; let i = index;\">\n        <mat-form-field> <input matInput type=\"text\" #modeOfTransport=\"ngModel\" name=\"modeOfTransport-{{i}}\" [(ngModel)]=\"element.modeOfTransport\" required /></mat-form-field>\n      </mat-cell>\n    </ng-container>\n\n    <ng-container matColumnDef=\"description\">\n      <mat-header-cell *matHeaderCellDef> Description </mat-header-cell>\n      <mat-cell *matCellDef=\"let element; let i = index;\">\n        <mat-form-field> <input matInput type=\"text\" #description=\"ngModel\" name=\"description-{{i}}\" [(ngModel)]=\"element.description\" required /></mat-form-field>\n      </mat-cell>\n    </ng-container>\n\n    <ng-container matColumnDef=\"quantity\">\n      <mat-header-cell *matHeaderCellDef> Quantity </mat-header-cell>\n      <mat-cell *matCellDef=\"let element; let i = index;\">\n        <mat-form-field> <input matInput type=\"number\" #quantity=\"ngModel\" name=\"quantity-{{i}}\" [(ngModel)]=\"element.quantity\" required /></mat-form-field>\n      </mat-cell>\n    </ng-container>\n\n    <ng-container matColumnDef=\"unit\">\n      <mat-header-cell *matHeaderCellDef> Unit </mat-header-cell>\n      <mat-cell *matCellDef=\"let element; let i = index;\">\n        <mat-form-field>\n          <mat-select #unit=\"ngModel\" [(ngModel)]=\"element.unit\" name=\"unit-{{i}}\" required>\n            <mat-option *ngFor=\"let Unit of Units\" [value]=\"Unit._id\">\n              {{ Unit.viewValue }}\n            </mat-option>\n          </mat-select>\n        </mat-form-field>\n      </mat-cell>\n    </ng-container>\n\n    <ng-container matColumnDef=\"issuedTo\">\n      <mat-header-cell *matHeaderCellDef> Issued To </mat-header-cell>\n      <mat-cell *matCellDef=\"let element; let i = index;\">\n        <mat-form-field> <input matInput type=\"text\" #issuedTo=\"ngModel\" name=\"issuedTo-{{i}}\" [(ngModel)]=\"element.issuedTo\" required /></mat-form-field>\n      </mat-cell>\n    </ng-container>\n\n    <ng-container matColumnDef=\"dateOfReturn\">\n      <mat-header-cell *matHeaderCellDef> Date Of Return </mat-header-cell>\n      <mat-cell *matCellDef=\"let element; let i = index;\">\n        <input matInput\n          [matDatepicker]=\"picker1\" #dateOfReturn=\"ngModel\" [(ngModel)]=\"element.dateOfReturn\" name=\"dateOfReturn-{{i}}\" required readonly='true'>\n        <mat-datepicker-toggle matSuffix [for]=\"picker1\"></mat-datepicker-toggle>\n        <mat-datepicker #picker1></mat-datepicker>\n      </mat-cell>\n    </ng-container>\n    <ng-container matColumnDef=\"from\">\n      <mat-header-cell *matHeaderCellDef> From </mat-header-cell>\n      <mat-cell *matCellDef=\"let element; let i = index;\">\n        <mat-form-field> <input matInput type=\"text\" #from=\"ngModel\" name=\"from-{{i}}\" [(ngModel)]=\"element.from\" required /></mat-form-field>\n      </mat-cell>\n    </ng-container>\n\n    <ng-container matColumnDef=\"to\">\n      <mat-header-cell *matHeaderCellDef> To </mat-header-cell>\n      <mat-cell *matCellDef=\"let element; let i = index;\">\n        <mat-form-field> <input matInput type=\"text\" #to=\"ngModel\" name=\"to-{{i}}\" [(ngModel)]=\"element.to\" required /></mat-form-field>\n      </mat-cell>\n    </ng-container>\n\n    <ng-container matColumnDef=\"reason\">\n      <mat-header-cell *matHeaderCellDef> Reason </mat-header-cell>\n      <mat-cell *matCellDef=\"let element; let i = index;\">\n        <mat-form-field> <input matInput type=\"text\" #reason=\"ngModel\" name=\"reason-{{i}}\" [(ngModel)]=\"element.reason\" required /></mat-form-field>\n      </mat-cell>\n    </ng-container>\n\n    <ng-container matColumnDef=\"remark\">\n      <mat-header-cell *matHeaderCellDef> Remark </mat-header-cell>\n      <mat-cell *matCellDef=\"let element; let i = index;\">\n        <mat-form-field> <input matInput type=\"text\" #remark=\"ngModel\" name=\"remark-{{i}}\" [(ngModel)]=\"element.remark\" required /></mat-form-field>\n      </mat-cell>\n    </ng-container>\n\n    <!-- <ng-container matColumnDef=\"incomingRef\">\n      <mat-header-cell *matHeaderCellDef> Incoming Reference </mat-header-cell>\n      <mat-cell *matCellDef=\"let element\" class=\"last\">\n        <mat-form-field> <input matInput type=\"text\" [(ngModel)]=\"element.incomingRef\" required /></mat-form-field>\n      </mat-cell>\n    </ng-container> -->\n    <mat-header-row *matHeaderRowDef=\"dcGatePass; sticky: true\"></mat-header-row>\n    <mat-row [@rowsAnimation]=\"\" *matRowDef=\"let row; columns: dcGatePass;\"></mat-row>\n  </mat-table>\n</div>\n</form>\n<!-- <button mat-raised-button color=\"primary\" type=\"submit\" class=\"general-button\" (click)=\"onClickMe()\">Create</button> -->\n<!-- <br><br><br><br>\n<mat-accordion>\n  <mat-expansion-panel>\n    <mat-expansion-panel-header>\n      <mat-panel-title>\n        Table value\n      </mat-panel-title>\n    </mat-expansion-panel-header>\n    <code *ngFor=\"let pass of gatePasses\">\n    <ul>{{pass.modeOfTransport}} {{pass.description}} {{pass.quantity}} {{pass.unit}} {{pass.issuedTo}} {{pass.dateOfReturn}} {{pass.from}} {{pass.to}} {{pass.reason}} {{pass.remark}} {{pass.incomingRef}}</ul>\n    </code>\n  </mat-expansion-panel>\n</mat-accordion>\n\n<div *ngIf=\"getGatePasses\">\n  <div *ngFor=\"let getGatePass of getGatePasses\">\n    {{getGatePass.modeOfTransport}} {{getGatePass.description}} {{getGatePass.quantity}} {{getGatePass.unit}}\n    {{getGatePass.issuedTo}} {{getGatePass.dateOfReturn}} {{getGatePass.from}} {{getGatePass.to}} {{getGatePass.reason}}\n    {{getGatePass.remark}} {{getGatePass.incomingRef}}\n  </div>\n</div>\n<button mat-raised-button color=\"accent\" (click)=\"getGatePassFunc()\">Get Gate Pass</button> -->\n","<span class=\"gp-created\">\r\n  <mat-icon aria-hidden=\"false\" aria-label=\"Party Icon\">done_outline</mat-icon>\r\n  Gate Pass Created Successfully!\r\n</span>\r\n","import { Component, OnInit, Input } from '@angular/core';\nimport { Observable, Subject } from 'rxjs';\nimport {\n  debounceTime, distinctUntilChanged, switchMap\n} from 'rxjs/operators';\nimport { GpArray } from '../models/gpArray';\nimport { UserService } from '../services/user/user.service';\nimport { Router } from '@angular/router';\nimport { PrintService } from '../services/print/print.service';\n@Component({\n  selector: 'app-gatepass-search',\n  templateUrl: './gatepass-search.component.html',\n  styleUrls: ['./gatepass-search.component.css']\n})\nexport class GatepassSearchComponent implements OnInit {\n\n  gatePasses$: Observable<GpArray[]>;\n  private searchTerms = new Subject<string>();\n  @Input() print: string;\n  @Input() project: string;\n\n  constructor(private userService: UserService, private router: Router, private printService: PrintService) { }\n\n  search(term: string): void {\n    this.searchTerms.next(term);\n  }\n\n  ngOnInit(): void {\n    this.gatePasses$ = this.searchTerms.pipe(\n      // wait 300ms after each keystroke before considering the term\n      debounceTime(300),\n\n      // ignore new term if same as previous term\n      distinctUntilChanged(),\n\n      // switch to new search observable each time the term changes\n      switchMap((term: string) => this.userService.searchGatePasses(term, this.print, this.project)),\n\n    );\n    // this.userFunc();\n  }\n\n\n  selectFunc(gpArray: GpArray) {\n    if(this.print === '1') {\n      this.printService.generatePdf(gpArray, 'Print')\n    }\n    else {\n    this.userService.selectedGpArray = gpArray;\n    this.userService.storeGpArray(gpArray.gatePassNo);\n    this.router.navigate(['return']);\n    }\n  }\n}\n","<mat-form-field appearance=\"standard\">\n  <mat-label>Search Gate Pass</mat-label>\n  <input matInput type=\"number\" placeholder=\"Search By Gate Pass No.\" #searchBox aria-label=\"Number\" matInput [matAutocomplete]=\"auto\"\n    (input)=\"search(searchBox.value)\">\n  <mat-autocomplete autoActiveFirstOption #auto=\"matAutocomplete\">\n    <mat-option *ngFor=\"let gatePass of gatePasses$ | async\" [value]=\"gatePass.gatePassNo\" (onSelectionChange)=\"selectFunc(gatePass)\">\n      {{gatePass.gatePassNo}} {{gatePass.createForm.name}} {{gatePass.createdAt | date}}\n    </mat-option>\n  </mat-autocomplete>\n</mat-form-field>\n","import { Injectable } from '@angular/core';\nimport { CanActivate, ActivatedRouteSnapshot, RouterStateSnapshot, UrlTree, Router } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { UserService } from '../services/user/user.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthGuard implements CanActivate {\n  constructor(private router: Router, private userService: UserService) {}\n  canActivate(\n    next: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot): Observable<boolean | UrlTree> | Promise<boolean | UrlTree> | boolean | UrlTree {\n    const user = this.userService.loggedIn\n    if (user) {\n      return true;\n    }\n    this.router.navigate(['/login']);\n    return false;\n  }\n\n}\n","import { Injectable } from '@angular/core';\nimport { CanActivate, ActivatedRouteSnapshot, RouterStateSnapshot, UrlTree, Router } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { UserService } from '../services/user/user.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthorizeGuard implements CanActivate {\n  constructor(private router: Router, private userService: UserService) { }\n  canActivate(\n    next: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot): Observable<boolean | UrlTree> | Promise<boolean | UrlTree> | boolean | UrlTree {\n    const user = this.userService.loggedIn\n    if (user.selectedAuthorization) {\n      return true;\n    }\n    this.router.navigate(['home'])\n    return false;\n  }\n\n}\n","import { Injectable } from '@angular/core';\nimport { CanActivate, ActivatedRouteSnapshot, RouterStateSnapshot, UrlTree, Router } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { UserService } from '../services/user/user.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CreateGuard implements CanActivate {\n  constructor(private router: Router, private userService: UserService) { }\n  canActivate(\n    next: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot): Observable<boolean | UrlTree> | Promise<boolean | UrlTree> | boolean | UrlTree {\n    const user = this.userService.loggedIn\n    if (user.selectedCreation) {\n      return true;\n    }\n    this.router.navigate(['home'])\n    return false;\n  }\n\n}\n","import { Injectable } from '@angular/core';\nimport { CanActivate, ActivatedRouteSnapshot, RouterStateSnapshot, UrlTree, Router } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { UserService } from '../services/user/user.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class LoginGuard implements CanActivate {\n  constructor(private router: Router, private userService: UserService) {}\n  canActivate(\n    next: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot): Observable<boolean | UrlTree> | Promise<boolean | UrlTree> | boolean | UrlTree {\n    const user = this.userService.loggedIn\n    if(user) {\n      this.router.navigate(['home'])\n      return false;\n    }\n    return true;\n  }\n\n}\n","import { Injectable } from '@angular/core';\nimport { CanActivate, ActivatedRouteSnapshot, RouterStateSnapshot, UrlTree, Router } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { UserService } from '../services/user/user.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RoleGuard implements CanActivate {\n  constructor(private router: Router, private userService: UserService) { }\n  canActivate(\n    next: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot): Observable<boolean | UrlTree> | Promise<boolean | UrlTree> | boolean | UrlTree {\n    const user = this.userService.loggedIn\n    if (user.selectedUserType === 'Admin' || user.selectedUserType === 'Super Admin') {\n      return true;\n    }\n    this.router.navigate(['home'])\n    return false;\n  }\n\n}\n","import { Injectable } from '@angular/core';\nimport { CanActivate, ActivatedRouteSnapshot, RouterStateSnapshot, UrlTree, Router } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { UserService } from '../services/user/user.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class SuperAdminGuard implements CanActivate {\n  constructor(private router: Router, private userService: UserService) { }\n  canActivate(\n    next: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot): Observable<boolean | UrlTree> | Promise<boolean | UrlTree> | boolean | UrlTree {\n      const user = this.userService.loggedIn\n      if (user.selectedUserType === 'Super Admin') {\n        return true;\n      }\n      this.router.navigate(['home'])\n      return false;\n  }\n\n}\n","import { Component, OnInit } from '@angular/core';\nimport { UserService } from '../services/user/user.service';\nimport { Router } from '@angular/router';\nimport { rowsAnimation } from '../animations/template.animations';\n\n\n\n@Component({\n  selector: 'app-home',\n  templateUrl: './home.component.html',\n  styleUrls: ['./home.component.css'],\n  animations: [rowsAnimation]\n})\nexport class HomeComponent implements OnInit {\n\n  constructor(public userService: UserService, private router: Router,) {\n  }\n\n\n  ngOnInit(): void {\n\n  }\n\n}\n\n\n","<h1>Welcome {{userService.loggedIn.name}} to the NTPC {{userService.loggedIn.selectedProject.viewValue}} Material Gate Pass System</h1>\n<!-- <img class=\"home-image\" src=\"../../assets/bg.png\" alt=\"\" /> -->\n","import { Component, OnInit } from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport { MatTableDataSource } from '@angular/material/table';\nimport { Router } from '@angular/router';\nimport { rowsAnimation } from '../animations/template.animations';\nimport { GpArray } from '../models/gpArray';\nimport { SearchTable } from '../models/searchTable';\nimport { Unit } from '../models/unit';\nimport { User } from '../models/user';\nimport { UserService } from '../services/user/user.service';\n\n@Component({\n  selector: 'app-inbox',\n  templateUrl: './inbox.component.html',\n  styleUrls: ['./inbox.component.css'],\n  animations: [rowsAnimation],\n})\nexport class InboxComponent implements OnInit {\n\n  displayedColumns: string[] = ['id', 'sno', 'description', 'quantity', 'unit', 'dateOfCreation', 'dueDateOfReturn', 'department', 'createdBy', 'owner', 'movement', 'status'];\n  dataSource: MatTableDataSource<SearchTable>;\n\n  authDisplayedColumns: string[] = ['id', 'sno', 'description', 'quantity', 'unit', 'dateOfCreation', 'dueDateOfReturn', 'department', 'createdBy', 'owner', 'movement', 'status'];\n  authDataSource: MatTableDataSource<SearchTable>;\n\n  searchTableData: SearchTable[] = [];\n  authSearchTableData: SearchTable[] = []\n\n  constructor(private userService: UserService, public dialog: MatDialog, private router: Router) { }\n\n  Units: Unit[];\n\n  ngOnInit(): void {\n    this.getGpArray();\n    this.getAuthGpArray();\n  }\n\n  filterData(gpArrays) {\n    for (const gp of gpArrays) {\n      for (const tableRow of gp.gatePass) {\n        if (tableRow.sno == 1) {\n          this.searchTableData.push({\n            id: gp.gatePassNo,\n            sno: tableRow.sno,\n            quantity: tableRow.quantity,\n            unit: tableRow.unit,\n            dateOfCreation: gp.createdAt,\n            dueDateOfReturn: tableRow.dateOfReturn,\n            department: gp.createForm.selectedDepartment.viewValue,\n            createdBy: gp.createdBy.name,\n            owner: gp.createForm.selectedOwner,\n            movement: gp.createForm.selectedMovement,\n            status: gp.status,\n            description: tableRow.description\n          })\n        }\n        else {\n          this.searchTableData.push({\n            vId: gp.gatePassNo,\n            sno: tableRow.sno,\n            quantity: tableRow.quantity,\n            unit: tableRow.unit,\n            dateOfCreation: gp.createdAt,\n            dueDateOfReturn: tableRow.dateOfReturn,\n            department: gp.createForm.selectedDepartment.viewValue,\n            createdBy: gp.createdBy.name,\n            owner: gp.createForm.selectedOwner,\n            movement: gp.createForm.selectedMovement,\n            status: gp.status,\n            description: tableRow.description\n          })\n        }\n      }\n    }\n  }\n\n  authFilterData(gpArrays) {\n    for (const gp of gpArrays) {\n      for (const tableRow of gp.gatePass) {\n        if (tableRow.sno == 1) {\n          this.authSearchTableData.push({\n            id: gp.gatePassNo,\n            sno: tableRow.sno,\n            quantity: tableRow.quantity,\n            unit: tableRow.unit,\n            dateOfCreation: gp.createdAt,\n            dueDateOfReturn: tableRow.dateOfReturn,\n            department: gp.createForm.selectedDepartment.viewValue,\n            createdBy: gp.createdBy.name,\n            owner: gp.createForm.selectedOwner,\n            movement: gp.createForm.selectedMovement,\n            status: gp.status,\n            description: tableRow.description\n          })\n        }\n        else {\n          this.authSearchTableData.push({\n            vId: gp.gatePassNo,\n            sno: tableRow.sno,\n            quantity: tableRow.quantity,\n            unit: tableRow.unit,\n            dateOfCreation: gp.createdAt,\n            dueDateOfReturn: tableRow.dateOfReturn,\n            department: gp.createForm.selectedDepartment.viewValue,\n            createdBy: gp.createdBy.name,\n            owner: gp.createForm.selectedOwner,\n            movement: gp.createForm.selectedMovement,\n            status: gp.status,\n            description: tableRow.description\n          })\n        }\n      }\n    }\n  }\n\n  rId;\n  getRecord(row) {\n    row.id == null ? this.rId = row.vId : this.rId = row.id;\n    const gp = this.gpArrays.find(gp => gp.gatePassNo == this.rId);\n    this.onSelect(gp);\n    // for(const gp of this.gpArrays) {\n    //   if(gp.gatePassNo === this.rId) {\n    //     this.onSelect(gp);\n    //     console.log(gp);\n    //     break;\n    //   }\n    // }\n  }\n\n  aRId;\n  authGetRecord(row) {\n    row.id == null ? this.aRId = row.vId : this.aRId = row.id;\n    const gp = this.authGpArrays.find(gp => gp.gatePassNo == this.aRId);\n    this.onSelect(gp);\n    // for(const gp of this.gpArrays) {\n    //   if(gp.gatePassNo === this.rId) {\n    //     this.onSelect(gp);\n    //     console.log(gp);\n    //     break;\n    //   }\n    // }\n  }\n\n  applyFilter(event: Event) {\n    const filterValue = (event.target as HTMLInputElement).value;\n    this.dataSource.filter = filterValue.trim().toLowerCase();\n  }\n\n  authApplyFilter(event: Event) {\n    const filterValue = (event.target as HTMLInputElement).value;\n    this.authDataSource.filter = filterValue.trim().toLowerCase();\n  }\n\n  loggedIn: User = this.userService.loggedIn\n\n  gpArrays: GpArray[];\n  authGpArrays: GpArray[];\n  // getGpArray() {\n  //   console.log(this.userService.gpArrays)\n  //   if (this.userService.gpArrays == undefined) {\n  //     this.refreshFilter();\n  //   }\n  //   else {\n  //     this.gpArrays = this.userService.gpArrays;\n  //     this.filterData(this.gpArrays)\n  //     this.dataSource = new MatTableDataSource(this.searchTableData);\n  //   }\n  // }\n\n  authToId = []\n  pendingBool = false;\n  authBool = false;\n\n  getGpArray() {\n    this.loggedIn.authorizedTo.forEach(authTo => {\n      this.authToId.push(authTo._id)\n    })\n    console.log(this.authToId)\n    this.userService.getInboxGpArray(this.authToId)\n      .subscribe((gpArrays: GpArray[]) => {\n        this.gpArrays = gpArrays\n        if(this.gpArrays.length > 0) {\n          this.pendingBool = true;\n        }\n        this.filterData(gpArrays)\n        this.dataSource = new MatTableDataSource(this.searchTableData);\n      })\n  }\n\n  getAuthGpArray() {\n    this.userService.getInboxAuthGpArray(this.loggedIn._id)\n      .subscribe((authGpArrays: GpArray[]) => {\n        console.log(authGpArrays)\n        this.authGpArrays = authGpArrays\n        if(this.authGpArrays.length > 0) {\n          this.authBool = true;\n        }\n        this.authFilterData(authGpArrays)\n        this.authDataSource = new MatTableDataSource(this.authSearchTableData)\n      })\n  }\n\n  // refreshFilter() {\n  //   this.userService.getFilterGpArray(this.userService.getFilter())\n  //     .subscribe((gpArrays) => {\n  //       console.log(gpArrays)\n  //       this.userService.gpArrays = gpArrays;\n  //       this.gpArrays = this.userService.gpArrays;\n  //       this.filterData(this.gpArrays)\n  //       this.dataSource = new MatTableDataSource(this.searchTableData);\n  //     })\n  // }\n\n  // selectedGpArray: GpArray;\n  user: User;\n  dcDate;\n  onSelect(gpArray: GpArray): void {\n    this.userService.selectedGpArray = gpArray;\n    this.userService.storeGpArray(gpArray.gatePassNo);\n    this.router.navigate(['return']);\n  }\n\n  getUnits() {\n    this.userService.getUnits()\n      .subscribe(units => this.Units = units);\n  }\n\n\n}\n","<h1>Gate Pass Inbox</h1>\n<div *ngIf=\"pendingBool\">\n  <h2>Pending for Authorization</h2>\n<mat-form-field class=\"filter\">\n  <mat-label>Filter</mat-label>\n  <input matInput (keyup)=\"applyFilter($event)\" placeholder=\"search term\" #input>\n</mat-form-field>\n\n<mat-table [dataSource]=\"dataSource\" class=\"mat-elevation-z8 example-container searchTable\">\n\n  <ng-container matColumnDef=\"id\">\n    <mat-header-cell *matHeaderCellDef> Gate Pass No. </mat-header-cell>\n    <mat-cell class=\"search-table-mat-cell\" *matCellDef=\"let element\"> {{element.id}} </mat-cell>\n  </ng-container>\n\n  <ng-container matColumnDef=\"sno\">\n    <mat-header-cell *matHeaderCellDef> S.No. </mat-header-cell>\n    <mat-cell class=\"search-table-mat-cell\" *matCellDef=\"let element\"> {{element.sno}} </mat-cell>\n  </ng-container>\n\n  <ng-container matColumnDef=\"department\">\n    <mat-header-cell *matHeaderCellDef> Department </mat-header-cell>\n    <mat-cell class=\"search-table-mat-cell\" *matCellDef=\"let element\"> {{element.department}} </mat-cell>\n  </ng-container>\n\n  <ng-container matColumnDef=\"quantity\">\n    <mat-header-cell *matHeaderCellDef> Quantity </mat-header-cell>\n    <mat-cell class=\"search-table-mat-cell\" *matCellDef=\"let element\"> {{element.quantity}} </mat-cell>\n  </ng-container>\n\n  <ng-container matColumnDef=\"unit\">\n    <mat-header-cell *matHeaderCellDef> Unit </mat-header-cell>\n    <mat-cell class=\"search-table-mat-cell\" *matCellDef=\"let element\"> {{element.unit.viewValue}} </mat-cell>\n  </ng-container>\n\n  <ng-container matColumnDef=\"dateOfCreation\">\n    <mat-header-cell *matHeaderCellDef> Date Of Creation </mat-header-cell>\n    <mat-cell class=\"search-table-mat-cell\" *matCellDef=\"let element\"> {{element.dateOfCreation | date}} </mat-cell>\n  </ng-container>\n\n  <ng-container matColumnDef=\"dueDateOfReturn\">\n    <mat-header-cell *matHeaderCellDef> Due Date Of Return </mat-header-cell>\n    <mat-cell class=\"search-table-mat-cell\" *matCellDef=\"let element\"> {{element.dueDateOfReturn | date}} </mat-cell>\n  </ng-container>\n\n  <ng-container matColumnDef=\"createdBy\">\n    <mat-header-cell *matHeaderCellDef> Created By </mat-header-cell>\n    <mat-cell class=\"search-table-mat-cell\" *matCellDef=\"let element\"> {{element.createdBy}} </mat-cell>\n  </ng-container>\n\n  <ng-container matColumnDef=\"owner\">\n    <mat-header-cell *matHeaderCellDef> Material Owner </mat-header-cell>\n    <mat-cell class=\"search-table-mat-cell\" *matCellDef=\"let element\"> {{element.owner}} </mat-cell>\n  </ng-container>\n\n  <ng-container matColumnDef=\"movement\">\n    <mat-header-cell *matHeaderCellDef> Movement </mat-header-cell>\n    <mat-cell class=\"search-table-mat-cell\" *matCellDef=\"let element\"> {{element.movement}} </mat-cell>\n  </ng-container>\n\n  <ng-container matColumnDef=\"status\">\n    <mat-header-cell *matHeaderCellDef> Status </mat-header-cell>\n    <mat-cell class=\"search-table-mat-cell\" *matCellDef=\"let element\"> {{element.status}} </mat-cell>\n  </ng-container>\n\n  <ng-container matColumnDef=\"description\">\n    <mat-header-cell *matHeaderCellDef> Material Description </mat-header-cell>\n    <mat-cell class=\"search-table-mat-cell\" *matCellDef=\"let element\"> {{element.description}} </mat-cell>\n  </ng-container>\n\n  <mat-header-row *matHeaderRowDef=\"displayedColumns; sticky: true\"></mat-header-row>\n  <mat-row [@rowsAnimation]=\"\" (click)=\"getRecord(row)\"\n    *matRowDef=\"let row; columns: displayedColumns;\"></mat-row>\n\n  <!-- <mat-row class=\"mat-row\" *matNoDataRow>\n    <mat-cell class=\"mat-cell\" colspan=\"12\">No data matching the filter \"{{input.value}}\"</mat-cell>\n  </mat-row> -->\n  <tr class=\"mat-row\" *matNoDataRow>\n    <td class=\"mat-cell\" colspan=\"4\">No data matching the filter \"{{input.value}}\"</td>\n  </tr>\n</mat-table>\n</div>\n\n<!-- AUTHORIZED TABLE -->\n<div *ngIf=\"authBool\">\n  <h2>Authorized</h2>\n<mat-form-field class=\"filter\">\n  <mat-label>Filter</mat-label>\n  <input matInput (keyup)=\"authApplyFilter($event)\" placeholder=\"search term\" #authInput>\n</mat-form-field>\n\n<mat-table [dataSource]=\"authDataSource\" class=\"mat-elevation-z8 example-container searchTable\">\n\n  <ng-container matColumnDef=\"id\">\n    <mat-header-cell *matHeaderCellDef> Gate Pass No. </mat-header-cell>\n    <mat-cell class=\"search-table-mat-cell\" *matCellDef=\"let element\"> {{element.id}} </mat-cell>\n  </ng-container>\n\n  <ng-container matColumnDef=\"sno\">\n    <mat-header-cell *matHeaderCellDef> S.No. </mat-header-cell>\n    <mat-cell class=\"search-table-mat-cell\" *matCellDef=\"let element\"> {{element.sno}} </mat-cell>\n  </ng-container>\n\n  <ng-container matColumnDef=\"department\">\n    <mat-header-cell *matHeaderCellDef> Department </mat-header-cell>\n    <mat-cell class=\"search-table-mat-cell\" *matCellDef=\"let element\"> {{element.department}} </mat-cell>\n  </ng-container>\n\n  <ng-container matColumnDef=\"quantity\">\n    <mat-header-cell *matHeaderCellDef> Quantity </mat-header-cell>\n    <mat-cell class=\"search-table-mat-cell\" *matCellDef=\"let element\"> {{element.quantity}} </mat-cell>\n  </ng-container>\n\n  <ng-container matColumnDef=\"unit\">\n    <mat-header-cell *matHeaderCellDef> Unit </mat-header-cell>\n    <mat-cell class=\"search-table-mat-cell\" *matCellDef=\"let element\"> {{element.unit.viewValue}} </mat-cell>\n  </ng-container>\n\n  <ng-container matColumnDef=\"dateOfCreation\">\n    <mat-header-cell *matHeaderCellDef> Date Of Creation </mat-header-cell>\n    <mat-cell class=\"search-table-mat-cell\" *matCellDef=\"let element\"> {{element.dateOfCreation | date}} </mat-cell>\n  </ng-container>\n\n  <ng-container matColumnDef=\"dueDateOfReturn\">\n    <mat-header-cell *matHeaderCellDef> Due Date Of Return </mat-header-cell>\n    <mat-cell class=\"search-table-mat-cell\" *matCellDef=\"let element\"> {{element.dueDateOfReturn | date}} </mat-cell>\n  </ng-container>\n\n  <ng-container matColumnDef=\"createdBy\">\n    <mat-header-cell *matHeaderCellDef> Created By </mat-header-cell>\n    <mat-cell class=\"search-table-mat-cell\" *matCellDef=\"let element\"> {{element.createdBy}} </mat-cell>\n  </ng-container>\n\n  <ng-container matColumnDef=\"owner\">\n    <mat-header-cell *matHeaderCellDef> Material Owner </mat-header-cell>\n    <mat-cell class=\"search-table-mat-cell\" *matCellDef=\"let element\"> {{element.owner}} </mat-cell>\n  </ng-container>\n\n  <ng-container matColumnDef=\"movement\">\n    <mat-header-cell *matHeaderCellDef> Movement </mat-header-cell>\n    <mat-cell class=\"search-table-mat-cell\" *matCellDef=\"let element\"> {{element.movement}} </mat-cell>\n  </ng-container>\n\n  <ng-container matColumnDef=\"status\">\n    <mat-header-cell *matHeaderCellDef> Status </mat-header-cell>\n    <mat-cell class=\"search-table-mat-cell\" *matCellDef=\"let element\"> {{element.status}} </mat-cell>\n  </ng-container>\n\n  <ng-container matColumnDef=\"description\">\n    <mat-header-cell *matHeaderCellDef> Material Description </mat-header-cell>\n    <mat-cell class=\"search-table-mat-cell\" *matCellDef=\"let element\"> {{element.description}} </mat-cell>\n  </ng-container>\n\n  <mat-header-row *matHeaderRowDef=\"displayedColumns; sticky: true\"></mat-header-row>\n  <mat-row [@rowsAnimation]=\"\" (click)=\"authGetRecord(row)\"\n    *matRowDef=\"let row; columns: authDisplayedColumns;\"></mat-row>\n\n  <!-- <mat-row class=\"mat-row\" *matNoDataRow>\n    <mat-cell class=\"mat-cell\" colspan=\"12\">No data matching the filter \"{{input.value}}\"</mat-cell>\n  </mat-row> -->\n  <tr class=\"mat-row\" *matNoDataRow>\n    <td class=\"mat-cell\" colspan=\"4\">No data matching the filter \"{{authInput.value}}\"</td>\n  </tr>\n</mat-table>\n</div>\n","import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormControl, Validators } from '@angular/forms';\nimport { UserService } from '../services/user/user.service';\nimport { User } from '../models/user';\nimport { Router } from '@angular/router';\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css']\n})\nexport class LoginComponent implements OnInit {\n  hide = true;\n  user: User;\n  loginForm;\n\n  constructor(private router: Router, private fb: FormBuilder, private userService: UserService) {\n    this.loginForm = this.fb.group({\n      empId: new FormControl('', Validators.compose([Validators.required, Validators.maxLength(7), Validators.minLength(6)])),\n      password: new FormControl('', Validators.required),\n    });\n  }\n\n  ngOnInit(): void {\n    // this.checkLogin();\n  }\n\n  onSubmit(loginData) {\n    if (!loginData) { return; }\n    this.userService.loginUser(loginData as User)\n      .subscribe(user => {\n        if (user) {\n          // this.userService.loggedIn = user;\n          this.router.navigate(['home']);\n        }\n          this.loginForm.reset();\n      },\n      error => {\n        alert('Login Failed')\n      });\n  }\n\n\n}\n","<form [formGroup]=\"loginForm\" (ngSubmit)=\"onSubmit(loginForm.value)\">\n  <mat-card class=\"login-card\">\n    <mat-card-header class=\"header\">\n      <mat-card-title>Login</mat-card-title>\n    </mat-card-header>\n    <mat-card-content>\n      <div class=\"row\">\n        <mat-form-field class=\"full-width\">\n          <input matInput placeholder=\"EmpId\" formControlName=\"empId\" type=\"text\" type=\"number\" />\n        </mat-form-field>\n      </div>\n      <div class=\"row\">\n        <mat-form-field class=\"full-width\">\n          <input matInput placeholder=\"Password\" formControlName=\"password\" [type]=\"hide ? 'password' : 'text'\" />\n          <button mat-icon-button matSuffix (click)=\"hide = !hide\" [attr.aria-label]=\"'Hide password'\"\n            [attr.aria-pressed]=\"hide\" type=\"button\">\n            <mat-icon>{{hide ? 'visibility_off' : 'visibility'}}</mat-icon>\n          </button>\n        </mat-form-field>\n      </div>\n    </mat-card-content>\n    <mat-card-actions class=\"button\">\n      <button mat-raised-button color=\"primary\" type=\"submit\" [disabled]=\"!loginForm.valid\">Login</button>\n    </mat-card-actions>\n  </mat-card>\n</form>\n<nav><a class=\"register\" routerLink=\"/register\">Register?</a></nav>\n<br>\n","import { Component, OnInit } from '@angular/core';\nimport { MessageService } from '../services/message/message.service';\n\n@Component({\n  selector: 'app-messages',\n  templateUrl: './messages.component.html',\n  styleUrls: ['./messages.component.css']\n})\nexport class MessagesComponent implements OnInit {\n\n  constructor(public messageService: MessageService) { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<div *ngIf=\"messageService.messages.length\">\n  <h2>Messages</h2>\n  <button class=\"clear\" (click)=\"messageService.clear()\">clear</button>\n  <div *ngFor='let message of messageService.messages'> {{message}} </div>\n</div>\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-page-not-found',\n  templateUrl: './page-not-found.component.html',\n  styleUrls: ['./page-not-found.component.css']\n})\nexport class PageNotFoundComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<h1 class=\"error\"> ⚠️ 404</h1>\n<h1 class=\"header-text\">!!Page Not Found!!</h1>\n","import { Component, OnInit } from '@angular/core';\nimport { rowsAnimation } from '../animations/template.animations';\nimport { MatTableDataSource } from '@angular/material/table';\nimport { ProjectArray } from '../models/projectArray';\nimport { GradeArray } from '../models/gradeArray';\nimport { DepartmentArray } from '../models/departmentArray';\nimport { User } from '../models/user';\nimport { UserService } from '../services/user/user.service';\nimport { Router } from '@angular/router';\nimport { MatDialog } from '@angular/material/dialog';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { Project } from '../models/project';\nimport { Grade } from '../models/grade';\nimport { Department } from '../models/department';\n\n\ninterface Authorization {\n  value: boolean;\n  viewValue: string;\n}\ninterface Creation {\n  value: boolean;\n  viewValue: string;\n}\ninterface UserType {\n  viewValue: string;\n}\n\n@Component({\n  selector: 'app-profile',\n  templateUrl: './profile.component.html',\n  styleUrls: ['./profile.component.css'],\n  animations: [rowsAnimation]\n})\nexport class ProfileComponent implements OnInit {\n\n\n  dcUserAuthTo = ['empId', 'name', 'department', 'grade', 'project', 'authorization', 'creation'];\n  dsUserAuthTo: MatTableDataSource<User>;\n\n  dcUserHistory = ['department', 'from', 'to'];\n  dsUserHistory: MatTableDataSource<DepartmentArray>\n\n  dcUserHistoryGrade = ['grade', 'from', 'to'];\n  dsUserHistoryGrade: MatTableDataSource<GradeArray>\n\n  dcUserHistoryProject = ['project', 'from', 'to'];\n  dsUserHistoryProject: MatTableDataSource<ProjectArray>\n\n  constructor(private userService: UserService, private router: Router, public dialog: MatDialog, private _snackBar: MatSnackBar) {\n    this.dsUserAuthTo = new MatTableDataSource(this.user.authorizedTo)\n    this.dsUserHistory = new MatTableDataSource(this.user.Department)\n    this.dsUserHistoryGrade = new MatTableDataSource(this.user.Grade)\n    this.dsUserHistoryProject = new MatTableDataSource(this.user.Project)\n  }\n\n  user = this.userService.loggedIn;\n\n  ngOnInit(): void {\n    this.redirectFunc()\n    this.getProjects();\n    this.getGrades();\n    this.getDepartments();\n    this.checkUserType();\n  }\n\n  showBool = true;\n  checkUserType() {\n    if(this.user.selectedUserType === 'Security') {\n      this.showBool = false;\n    }\n  }\n\n  projects: Project[];\n  grades: Grade[];\n  departments: Department[];\n  userTypes: UserType[] = [\n    { viewValue: 'Super Admin' },\n    { viewValue: 'Admin' },\n    { viewValue: 'User' },\n  ];\n  authorizations: Authorization[] = [\n    { value: true, viewValue: 'Yes' },\n    { value: false, viewValue: 'No' },\n  ];\n  creations: Creation[] = [\n    { value: true, viewValue: 'Yes' },\n    { value: false, viewValue: 'No' },\n  ];\n\n  getProjects() {\n    this.userService.getProjects()\n      .subscribe(projects => this.projects = projects);\n  }\n\n  getGrades() {\n    this.userService.getGrades()\n      .subscribe(grades => this.grades = grades);\n  }\n\n  getDepartments() {\n    this.userService.getDepartments()\n      .subscribe(departments => this.departments = departments);\n  }\n\n  redirectFunc() {\n    if (this.user === null || this.user === undefined) {\n      this.router.navigate(['login']);\n    }\n  }\n\n  cancel() {\n    this.userService.getUser(this.user._id)\n      .subscribe((user) => this.user = user)\n    this.disableTextbox = !this.disableTextbox;\n  }\n\n  disableTextbox = true;\n  toggleEdit() {\n    this.disableTextbox = !this.disableTextbox;\n  }\n\n\n  updateUser() {\n    const dialogRef = this.dialog.open(DialogContentHome);\n\n    dialogRef.afterClosed().subscribe(result => {\n      // console.log(`Dialog result: ${result}`);\n      if (result == true) {\n        this.userService.updateUser(this.user as User)\n          .subscribe((updatedUser) => {\n            // this.user = this.userService.loggedIn\n            if (this.user.Department != updatedUser.Department) {\n              this.dsUserHistory = new MatTableDataSource(updatedUser.Department)\n            }\n            if (this.user.Grade != updatedUser.Grade) {\n              this.dsUserHistoryGrade = new MatTableDataSource(updatedUser.Grade)\n            }\n            if (this.user.Project != updatedUser.Project) {\n              this.dsUserHistoryProject = new MatTableDataSource(updatedUser.Project)\n            }\n            this.userService.loggedIn = updatedUser\n            this.disableTextbox = true;\n            this._snackBar.openFromComponent(UserEditedComponent, {\n              duration: 3 * 1000,\n            });\n          });\n      }\n      else {\n        this.cancel();\n      }\n\n    });\n  }\n}\n\n@Component({\n  selector: 'dialog-content-home',\n  templateUrl: 'dialog-content-home.html',\n})\nexport class DialogContentHome { }\n\n@Component({\n  selector: 'snack-bar-component-userEdited',\n  templateUrl: 'snack-bar-component-userEdited.html',\n  styles: [`\n    .user-edited {\n      color: hotpink;\n    }\n  `],\n})\nexport class UserEditedComponent { }\n","<h1>Welcome {{user.name}} to the Material Gate Pass System</h1>\n<div class=\"user-div\">\n  <mat-card class=\"user-card\">\n    <mat-card-header class=\"header\">\n      <mat-card-title>User Details</mat-card-title>\n    </mat-card-header>\n    <mat-card-content>\n      <div class=\"row\">\n        <mat-form-field class=\"full-width\">\n          <input matInput placeholder=\"EmpId\" [disabled]='true' [(ngModel)]=\"user.empId\" type=\"text\" type=\"number\"  />\n        </mat-form-field>\n      </div>\n      <div class=\"row\">\n        <mat-form-field class=\"full-width\">\n          <input matInput placeholder=\"Name\" [disabled]='true' [(ngModel)]=\"user.name\" type=\"text\" />\n        </mat-form-field>\n      </div>\n      <div class=\"row\" *ngIf=\"showBool\">\n        <mat-form-field class=\"full-width\">\n          <mat-label>Department</mat-label>\n          <mat-select [(ngModel)]=\"user.selectedDepartment._id\" [disabled]='disableTextbox' name=\"department\">\n            <mat-option *ngFor=\"let department of departments\" [value]=\"department._id\">\n              {{ department.viewValue }}\n            </mat-option>\n          </mat-select>\n        </mat-form-field>\n      </div>\n      <div class=\"row\" *ngIf=\"showBool\">\n        <mat-form-field class=\"full-width\">\n          <mat-label>Grade</mat-label>\n          <mat-select [(ngModel)]=\"user.selectedGrade._id\" [disabled]='disableTextbox' name=\"grade\">\n            <mat-option *ngFor=\"let grade of grades\" [value]=\"grade._id\">\n              {{ grade.viewValue }}\n            </mat-option>\n          </mat-select>\n        </mat-form-field>\n      </div>\n      <div class=\"row\">\n        <mat-form-field class=\"full-width\">\n          <mat-label>Project</mat-label>\n          <mat-select [(ngModel)]=\"user.selectedProject._id\" [disabled]='disableTextbox' name=\"project\">\n            <mat-option *ngFor=\"let project of projects\" [value]=\"project._id\">\n              {{ project.viewValue }}\n            </mat-option>\n          </mat-select>\n        </mat-form-field>\n      </div>\n      <div class=\"row\" *ngIf=\"showBool\">\n        <mat-form-field class=\"full-width\">\n          <mat-label>Authorization</mat-label>\n          <mat-select [(ngModel)]=\"user.selectedAuthorization\" [disabled]='true' name=\"authorization\">\n            <mat-option *ngFor=\"let authorization of authorizations\" [value]=\"authorization.value\">\n              {{ authorization.viewValue }}\n            </mat-option>\n          </mat-select>\n        </mat-form-field>\n      </div>\n      <div class=\"row\" *ngIf=\"showBool\">\n        <mat-form-field class=\"full-width\">\n          <mat-label>Creation</mat-label>\n          <mat-select [(ngModel)]=\"user.selectedCreation\" [disabled]='true' name=\"creation\">\n            <mat-option *ngFor=\"let creation of creations\" [value]=\"creation.value\">\n              {{ creation.viewValue }}\n            </mat-option>\n          </mat-select>\n        </mat-form-field>\n      </div>\n    </mat-card-content>\n    <mat-card-actions class=\"button\">\n      <button mat-raised-button type=\"button\" *ngIf=\"!disableTextbox\" (click)=\"cancel();\">Cancel</button>\n      <button mat-raised-button type=\"button\" color=\"primary\" *ngIf=\"disableTextbox\" (click)=\"toggleEdit()\">Edit</button>\n      <button mat-raised-button type=\"button\" color=\"accent\" *ngIf=\"!disableTextbox\" (click)=\"updateUser()\">Save</button>\n  </mat-card-actions>\n  </mat-card>\n</div>\n<br>\n\n<h3 class=\"table-heading-h4\" *ngIf=\"user.authorizedTo.length != 0 && showBool\">Authorizer For: </h3>\n<div class=\"example-container mat-elevation-z8 mat-table auth-table\" *ngIf=\"user.authorizedTo.length != 0 && showBool\">\n  <mat-table [dataSource]=\"dsUserAuthTo\">\n\n    <ng-container matColumnDef=\"empId\">\n      <mat-header-cell *matHeaderCellDef> Employee Id </mat-header-cell>\n      <mat-cell *matCellDef=\"let element\">\n        {{element.empId}}\n      </mat-cell>\n    </ng-container>\n\n    <ng-container matColumnDef=\"name\">\n      <mat-header-cell *matHeaderCellDef> Name </mat-header-cell>\n      <mat-cell *matCellDef=\"let element\">\n        {{element.name}}\n      </mat-cell>\n    </ng-container>\n\n    <ng-container matColumnDef=\"department\">\n      <mat-header-cell *matHeaderCellDef> Department </mat-header-cell>\n      <mat-cell *matCellDef=\"let element\">\n        {{element.selectedDepartment.viewValue}}\n      </mat-cell>\n    </ng-container>\n\n    <ng-container matColumnDef=\"grade\">\n      <mat-header-cell *matHeaderCellDef> Grade </mat-header-cell>\n      <mat-cell *matCellDef=\"let element\">\n        {{element.selectedGrade.viewValue}}\n      </mat-cell>\n    </ng-container>\n\n    <ng-container matColumnDef=\"project\">\n      <mat-header-cell *matHeaderCellDef> Project </mat-header-cell>\n      <mat-cell *matCellDef=\"let element\">\n        {{element.selectedProject.viewValue}}\n      </mat-cell>\n    </ng-container>\n\n    <ng-container matColumnDef=\"authorization\">\n      <mat-header-cell *matHeaderCellDef> Authorization </mat-header-cell>\n      <mat-cell *matCellDef=\"let element\">\n        {{element.selectedAuthorization}}\n      </mat-cell>\n    </ng-container>\n    <ng-container matColumnDef=\"creation\">\n      <mat-header-cell *matHeaderCellDef> Creation </mat-header-cell>\n      <mat-cell *matCellDef=\"let element\">\n        {{element.selectedCreation}}\n      </mat-cell>\n    </ng-container>\n\n    <mat-header-row *matHeaderRowDef=\"dcUserAuthTo\"></mat-header-row>\n    <mat-row [@rowsAnimation]=\"\" *matRowDef=\"let row; columns: dcUserAuthTo;\"></mat-row>\n  </mat-table>\n</div>\n<br>\n<h3 class=\"table-heading-h4\" *ngIf=\"user.Department.length > 1 || user.Grade.length > 1 || user.Project.length > 1\">History: </h3>\n<div class=\"table-row\">\n<div class=\"example-container mat-elevation-z8 mat-table history\" *ngIf=\"user.Department.length > 1 && showBool\">\n  <mat-table [dataSource]=\"dsUserHistory\">\n\n    <ng-container matColumnDef=\"department\">\n      <mat-header-cell *matHeaderCellDef> Department </mat-header-cell>\n      <mat-cell *matCellDef=\"let element\">\n        {{element.selectedDepartment.viewValue}}\n      </mat-cell>\n    </ng-container>\n\n    <ng-container matColumnDef=\"from\">\n      <mat-header-cell *matHeaderCellDef> From </mat-header-cell>\n      <mat-cell *matCellDef=\"let element\">\n        {{element.from | date}}\n      </mat-cell>\n    </ng-container>\n\n    <ng-container matColumnDef=\"to\">\n      <mat-header-cell *matHeaderCellDef> To </mat-header-cell>\n      <mat-cell *matCellDef=\"let element\">\n        {{element.to | date}}\n      </mat-cell>\n    </ng-container>\n\n\n    <mat-header-row *matHeaderRowDef=\"dcUserHistory\"></mat-header-row>\n    <mat-row [@rowsAnimation]=\"\" *matRowDef=\"let row; columns: dcUserHistory;\"></mat-row>\n  </mat-table>\n</div>\n\n<div class=\"example-container mat-elevation-z8 mat-table history\" *ngIf=\"user.Grade.length > 1 && showBool\">\n  <mat-table [dataSource]=\"dsUserHistoryGrade\">\n\n    <ng-container matColumnDef=\"grade\">\n      <mat-header-cell *matHeaderCellDef> Grade </mat-header-cell>\n      <mat-cell *matCellDef=\"let element\">\n        {{element.selectedGrade.viewValue}}\n      </mat-cell>\n    </ng-container>\n\n    <ng-container matColumnDef=\"from\">\n      <mat-header-cell *matHeaderCellDef> From </mat-header-cell>\n      <mat-cell *matCellDef=\"let element\">\n        {{element.from | date}}\n      </mat-cell>\n    </ng-container>\n\n    <ng-container matColumnDef=\"to\">\n      <mat-header-cell *matHeaderCellDef> To </mat-header-cell>\n      <mat-cell *matCellDef=\"let element\">\n        {{element.to | date}}\n      </mat-cell>\n    </ng-container>\n\n\n    <mat-header-row *matHeaderRowDef=\"dcUserHistoryGrade\"></mat-header-row>\n    <mat-row [@rowsAnimation]=\"\" *matRowDef=\"let row; columns: dcUserHistoryGrade;\"></mat-row>\n  </mat-table>\n</div>\n\n<div class=\"example-container mat-elevation-z8 mat-table history\" *ngIf=\"user.Project.length > 1\">\n  <mat-table [dataSource]=\"dsUserHistoryProject\">\n\n    <ng-container matColumnDef=\"project\">\n      <mat-header-cell *matHeaderCellDef> Project </mat-header-cell>\n      <mat-cell *matCellDef=\"let element\">\n        {{element.selectedProject.viewValue}}\n      </mat-cell>\n    </ng-container>\n\n    <ng-container matColumnDef=\"from\">\n      <mat-header-cell *matHeaderCellDef> From </mat-header-cell>\n      <mat-cell *matCellDef=\"let element\">\n        {{element.from | date}}\n      </mat-cell>\n    </ng-container>\n\n    <ng-container matColumnDef=\"to\">\n      <mat-header-cell *matHeaderCellDef> To </mat-header-cell>\n      <mat-cell *matCellDef=\"let element\">\n        {{element.to | date}}\n      </mat-cell>\n    </ng-container>\n\n\n    <mat-header-row *matHeaderRowDef=\"dcUserHistoryProject\"></mat-header-row>\n    <mat-row [@rowsAnimation]=\"\" *matRowDef=\"let row; columns: dcUserHistoryProject;\"></mat-row>\n  </mat-table>\n</div>\n</div>\n","<h2 mat-dialog-title>Update Data?</h2>\r\n<mat-dialog-content class=\"mat-typography\">\r\n  <p>Are you sure you want to update Your Data?</p>\r\n</mat-dialog-content>\r\n<mat-dialog-actions align=\"end\">\r\n  <button mat-button mat-dialog-close>Cancel</button>\r\n  <button mat-button [mat-dialog-close]=\"true\" cdkFocusInitial>Update</button>\r\n</mat-dialog-actions>\r\n","<span class=\"user-edited\">\r\n  <mat-icon aria-hidden=\"false\" aria-label=\"Party Icon\">done_outline</mat-icon>\r\n  User Details Edited Successfully!\r\n</span>\r\n\r\n","import { Attribute, Directive, Input } from '@angular/core';\nimport { AbstractControl, NG_VALIDATORS, Validator } from '@angular/forms';\n\n@Directive({\n  selector: '[appQuantityRetValidator]',\n  providers: [{provide: NG_VALIDATORS, useExisting: QuantityRetValidatorDirective, multi: true}]\n})\nexport class QuantityRetValidatorDirective implements Validator {\n  @Input('appQuantityRetValidator') str: string;\n\n\n  // valueInLimit(quantityNum: number, quantityRet: number) {\n  //   let tolerance = 50;\n  //   let quantityRetTop = quantityNum + quantityNum*(tolerance/100);\n  //   let quantityRetBottom = quantityNum - quantityNum*(tolerance/100);\n  //   if((quantityRet>quantityRetBottom) && (quantityRet<quantityRetTop)) {\n  //     return true;\n  //   }\n  //   return false;\n  // }\n\n  validate(control: AbstractControl): {[key: string]: any} | null {\n    const words = this.str.split(' ');\n    let quantityStr = words[0]\n    let toleranceStr = words[1]\n\n    let quantityNum = Number(quantityStr)\n    let toleranceNum = Number(toleranceStr)\n\n    // console.log('Tolerance', toleranceNum)\n    // console.log('Quantity', quantityNum)\n\n    let quantityRet = control.value;\n\n    // console.log(quantityNum)\n    // let tolerance = 50;\n    // console.log(quantityRet, tolerance, quantityNum)\n    let quantityRetTop = quantityNum + quantityNum*(toleranceNum/100);\n    let quantityRetBottom = quantityNum - quantityNum*(toleranceNum/100);\n    // console.log('QuantityRetTop',quantityRetTop, 'QuantityRetBottom',quantityRetBottom)\n    // return this.quantity ? quantityValidator(this.valueInLimit(quantityNum, quantityRet))  : null\n    return ((quantityRet>=quantityRetBottom) && (quantityRet<=quantityRetTop)) ? null : {invalidQuantity: {value: control.value}}\n  }\n\n}\n","import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormControl, Validators } from '@angular/forms';\nimport { UserService } from '../services/user/user.service';\nimport { User } from '../models/user';\nimport { Project } from '../models/project';\nimport { Grade } from '../models/grade';\nimport { Department } from '../models/department';\nimport { ProjectArray } from '../models/projectArray';\n\ninterface Authorization {\n  value: boolean;\n  viewValue: string;\n}\ninterface Creation {\n  value: boolean;\n  viewValue: string;\n}\ninterface UserType {\n  viewValue: string;\n}\n\n@Component({\n  selector: 'app-register',\n  templateUrl: './register.component.html',\n  styleUrls: ['./register.component.css']\n})\nexport class RegisterComponent implements OnInit {\n\n  registerForm;\n\n  constructor(private fb: FormBuilder, private userService: UserService) {\n    this.registerForm = this.fb.group({\n      name: new FormControl('', Validators.required),\n      empId: new FormControl('', Validators.compose([Validators.required, Validators.maxLength(6), Validators.minLength(6)])),\n      password: new FormControl('', Validators.required),\n      selectedProject: new FormControl('', Validators.required),\n      selectedGrade: new FormControl('', Validators.required),\n      selectedDepartment: new FormControl('', Validators.required),\n      selectedUserType: new FormControl('', Validators.required),\n      selectedAuthorization: new FormControl('', Validators.required),\n      selectedCreation: new FormControl('', Validators.required),\n       });\n   }\n\n  ngOnInit(): void {\n    this.getUsers();\n    this.getProjects();\n    this.getGrades();\n    this.getDepartments();\n    }\n\n  selectedProject: string;\n  selectedGrade: string;\n  selectedDepartment: string;\n  selectedUserType: string;\n  selectedAuthorization: boolean;\n  selectedCreation: boolean;\n\n  users: User[];\n  projects: Project[];\n  grades: Grade[];\n  departments: Department[];\n  userTypes: UserType[] = [\n    {viewValue: 'Super Admin'},\n    {viewValue: 'Admin'},\n    {viewValue: 'User'},\n    {viewValue: 'Security'}\n  ];\n  authorizations: Authorization[] = [\n    {value: true, viewValue: 'Yes'},\n    {value: false, viewValue: 'No'},\n  ];\n  creations: Creation[] = [\n    {value: true, viewValue: 'Yes'},\n    {value: false, viewValue: 'No'},\n  ];\n\n  securityType = false;\n  userTypeFunc(userType) {\n    if(userType === this.userTypes[3].viewValue && this.registerForm.contains('selectedGrade')) {\n      this.securityType = true;\n      this.registerForm.removeControl('selectedGrade')\n      this.registerForm.setControl('empId', this.fb.control('', [Validators.required, Validators.maxLength(7), Validators.minLength(7)]));\n      this.registerForm.removeControl('selectedDepartment')\n      this.registerForm.removeControl('selectedAuthorization')\n      this.registerForm.removeControl('selectedCreation')\n    }\n    else {\n      this.securityType = false;\n      this.registerForm.addControl('selectedGrade', this.fb.control('', [Validators.required]));\n      this.registerForm.setControl('empId', this.fb.control('', [Validators.required, Validators.maxLength(6), Validators.minLength(6)]));\n      this.registerForm.addControl('selectedDepartment', this.fb.control('', [Validators.required]));\n      this.registerForm.addControl('selectedAuthorization', this.fb.control('', [Validators.required]));\n      this.registerForm.addControl('selectedCreation', this.fb.control('', [Validators.required]));\n    }\n    console.log(this.securityType)\n  }\n\n  getProjects() {\n    this.userService.getProjects()\n        .subscribe(projects => this.projects = projects);\n  }\n\n  getGrades() {\n    this.userService.getGrades()\n        .subscribe(grades => this.grades = grades);\n  }\n\n  getDepartments() {\n    this.userService.getDepartments()\n        .subscribe(departments => this.departments = departments);\n  }\n\n  getUsers() {\n    this.userService.getUsers()\n        .subscribe(users => this.users = users);\n  }\n\n  // createNewProject(regData): ProjectArray {\n  //   return {\n  //     selectedProject: regData.selectedProject , from: null, to: null\n  //   }\n  // }\n\n  onSubmit( registerData ) {\n    if(!registerData) { return; }\n    // this.createNewProject(registerData)\n    // else if(registerData.selectedUserType === this.userTypes[3].viewValue) {\n    //   this.userService.addSecurity( registerData as Security )\n    //   .subscribe(security => {\n    //     this.securities.push(security);\n    //   });\n    // }\n    else {\n    this.userService.addUser( registerData as User )\n      .subscribe(user => {\n        this.users.push(user);\n      });\n    }\n      this.registerForm.reset();\n      console.warn('Your details have been submitted', registerData);\n  }\n\n\n}\n\n// = [\n//   {value: 'simhadri', viewValue: 'Simhadri'},\n//   {value: 'kawas', viewValue: 'Kawas'},\n//   {value: 'delhi', viewValue: 'Delhi'},\n// ];\n","<form [formGroup]=\"registerForm\" (ngSubmit)=\"onSubmit(registerForm.value)\">\n  <mat-card class=\"register-card\">\n    <mat-card-header class=\"header\">\n      <mat-card-title>Register</mat-card-title>\n    </mat-card-header>\n    <mat-card-content>\n        <mat-form-field class=\"full-width\">\n          <mat-label>User Type</mat-label>\n          <mat-select formControlName=\"selectedUserType\" name=\"userType\" #userTypeSelect (valueChange)='userTypeFunc(userTypeSelect.value)'>\n            <mat-option *ngFor=\"let userType of userTypes\" [value]=\"userType.viewValue\">\n              {{ userType.viewValue }}\n            </mat-option>\n          </mat-select>\n        </mat-form-field>\n\n        <mat-form-field class=\"full-width\">\n          <input matInput placeholder=\"Name\" formControlName=\"name\" type=\"text\" />\n        </mat-form-field>\n\n        <mat-form-field class=\"full-width\">\n          <input matInput placeholder=\"EmpId\" formControlName=\"empId\" type=\"empId\" type=\"number\" />\n        </mat-form-field>\n\n        <mat-form-field class=\"full-width\">\n          <input matInput placeholder=\"Password\" formControlName=\"password\" type=\"password\" />\n        </mat-form-field>\n\n        <mat-form-field class=\"full-width\">\n          <mat-label>Project</mat-label>\n          <mat-select formControlName=\"selectedProject\" name=\"project\">\n            <mat-option *ngFor=\"let project of projects\" [value]=\"project._id\">\n              {{ project.viewValue }}\n            </mat-option>\n          </mat-select>\n        </mat-form-field>\n\n        <mat-form-field class=\"full-width\" *ngIf=\"!securityType\">\n          <mat-label>Grade</mat-label>\n          <mat-select formControlName=\"selectedGrade\" name=\"grade\">\n            <mat-option *ngFor=\"let grade of grades\" [value]=\"grade._id\">\n              {{ grade.viewValue }}\n            </mat-option>\n          </mat-select>\n        </mat-form-field>\n\n        <mat-form-field class=\"full-width\" *ngIf=\"!securityType\">\n          <mat-label>Department</mat-label>\n          <mat-select formControlName=\"selectedDepartment\" name=\"department\">\n            <mat-option *ngFor=\"let department of departments\" [value]=\"department._id\">\n              {{ department.viewValue }}\n            </mat-option>\n          </mat-select>\n        </mat-form-field>\n\n        <mat-form-field class=\"full-width\" *ngIf=\"!securityType\">\n          <mat-label>Authorization</mat-label>\n          <mat-select formControlName=\"selectedAuthorization\" name=\"authorization\">\n            <mat-option *ngFor=\"let authorization of authorizations\" [value]=\"authorization.value\">\n              {{ authorization.viewValue }}\n            </mat-option>\n          </mat-select>\n        </mat-form-field>\n\n        <mat-form-field class=\"full-width\" *ngIf=\"!securityType\">\n          <mat-label>Creation</mat-label>\n          <mat-select formControlName=\"selectedCreation\" name=\"creation\">\n            <mat-option *ngFor=\"let creation of creations\" [value]=\"creation.value\">\n              {{ creation.viewValue }}\n            </mat-option>\n          </mat-select>\n        </mat-form-field>\n\n    </mat-card-content>\n    <mat-card-actions class=\"button\">\n      <button mat-raised-button color=\"primary\" type=\"submit\" [disabled]=\"!registerForm.valid\">Register</button>\n    </mat-card-actions>\n  </mat-card>\n</form>\n<nav><a class=\"login\" routerLink=\"/login\">Login</a></nav>\n<br />\n<!-- <li *ngFor=\"let user of users\">\n  {{user.empId}} {{user.name}} {{user.password}} {{ user.selectedProject.viewValue }} {{ user.selectedGrade.viewValue }} {{ user.selectedDepartment.viewValue }}\n</li> -->\n<!-- <li *ngFor=\"let project of projects\">\n  {{project.viewValue}} {{project._id}}\n</li>\n<li *ngFor=\"let grade of grades\">\n  {{grade.viewValue}} {{grade._id}}\n</li>\n<li *ngFor=\"let department of departments\">\n  {{department.viewValue}} {{department._id}}\n</li> -->\n","import { Component, OnInit, Input } from '@angular/core';\nimport { UserService } from '../services/user/user.service';\nimport { GpArray } from '../models/gpArray';\nimport { MatTableDataSource } from '@angular/material/table';\nimport { rowsAnimation } from '../animations/template.animations';\nimport { MatDialog } from '@angular/material/dialog';\nimport { User } from '../models/user';\nimport { SearchTable } from '../models/searchTable';\nimport { Router } from '@angular/router';\nimport { CdkColumnDef, CdkTableModule } from '@angular/cdk/table';\nimport { Unit } from '../models/unit';\n\n\n@Component({\n  selector: 'app-report',\n  templateUrl: './report.component.html',\n  styleUrls: ['./report.component.css'],\n  animations: [rowsAnimation],\n  // providers: [CdkColumnDef, CdkTableModule]\n})\nexport class ReportComponent implements OnInit {\n\n  displayedColumns: string[] = ['id', 'sno', 'description', 'quantity', 'unit', 'dateOfCreation', 'dueDateOfReturn', 'department', 'createdBy', 'owner', 'movement', 'status'];\n  dataSource: MatTableDataSource<SearchTable>;\n\n  searchTableData: SearchTable[] = [];\n\n  constructor(private userService: UserService, public dialog: MatDialog, private router: Router) {\n\n  }\n\n  Units: Unit[];\n\n  ngOnInit(): void {\n    this.getGpArray();\n    // this.getUnits();\n  }\n\n  filterData(gpArrays) {\n    for (const gp of gpArrays) {\n      for (const tableRow of gp.gatePass) {\n        if (tableRow.sno == 1) {\n          this.searchTableData.push({\n            id: gp.gatePassNo,\n            sno: tableRow.sno,\n            quantity: tableRow.quantity,\n            unit: tableRow.unit,\n            dateOfCreation: gp.createdAt,\n            dueDateOfReturn: tableRow.dateOfReturn,\n            department: gp.createForm.selectedDepartment.viewValue,\n            createdBy: gp.createdBy.name,\n            owner: gp.createForm.selectedOwner,\n            movement: gp.createForm.selectedMovement,\n            status: gp.status,\n            description: tableRow.description\n          })\n        }\n        else {\n          this.searchTableData.push({\n            vId: gp.gatePassNo,\n            sno: tableRow.sno,\n            quantity: tableRow.quantity,\n            unit: tableRow.unit,\n            dateOfCreation: gp.createdAt,\n            dueDateOfReturn: tableRow.dateOfReturn,\n            department: gp.createForm.selectedDepartment.viewValue,\n            createdBy: gp.createdBy.name,\n            owner: gp.createForm.selectedOwner,\n            movement: gp.createForm.selectedMovement,\n            status: gp.status,\n            description: tableRow.description\n          })\n        }\n      }\n    }\n  }\n  rId;\n  getRecord(row) {\n    row.id == null ? this.rId = row.vId : this.rId = row.id;\n    const gp = this.gpArrays.find(gp => gp.gatePassNo == this.rId);\n    this.onSelect(gp);\n    // for(const gp of this.gpArrays) {\n    //   if(gp.gatePassNo === this.rId) {\n    //     this.onSelect(gp);\n    //     console.log(gp);\n    //     break;\n    //   }\n    // }\n  }\n\n  applyFilter(event: Event) {\n    const filterValue = (event.target as HTMLInputElement).value;\n    this.dataSource.filter = filterValue.trim().toLowerCase();\n  }\n\n  loggedIn: User = this.userService.loggedIn\n\n  gpArrays: GpArray[];\n  getGpArray() {\n    console.log(this.userService.gpArrays)\n    if (this.userService.gpArrays == undefined) {\n      this.refreshFilter();\n    }\n    else {\n      this.gpArrays = this.userService.gpArrays;\n      this.filterData(this.gpArrays)\n      this.dataSource = new MatTableDataSource(this.searchTableData);\n    }\n  }\n\n  refreshFilter() {\n    this.userService.getFilterGpArray(this.userService.getFilter())\n      .subscribe((gpArrays) => {\n        console.log(gpArrays)\n        this.userService.gpArrays = gpArrays;\n        this.gpArrays = this.userService.gpArrays;\n        this.filterData(this.gpArrays)\n        this.dataSource = new MatTableDataSource(this.searchTableData);\n      })\n  }\n\n  selectedGpArray: GpArray;\n  user: User;\n  dcDate;\n  onSelect(gpArray: GpArray): void {\n    this.userService.selectedGpArray = gpArray;\n    this.userService.storeGpArray(gpArray.gatePassNo);\n    this.router.navigate(['return']);\n  }\n\n  getUnits() {\n    this.userService.getUnits()\n      .subscribe(units => this.Units = units);\n  }\n\n}\n","<h1>List of GatePasses</h1>\n\n<mat-form-field class=\"filter\">\n  <mat-label>Filter</mat-label>\n  <input matInput (keyup)=\"applyFilter($event)\" placeholder=\"search term\" #input>\n</mat-form-field>\n\n<mat-table matTableExporter [dataSource]=\"dataSource\" #exporter=\"matTableExporter\" class=\"mat-elevation-z8 example-container searchTable\">\n\n  <ng-container matColumnDef=\"id\">\n    <mat-header-cell *matHeaderCellDef> Gate Pass No. </mat-header-cell>\n    <mat-cell class=\"search-table-mat-cell\" *matCellDef=\"let element\"> {{element.id}} </mat-cell>\n  </ng-container>\n\n  <ng-container matColumnDef=\"sno\">\n    <mat-header-cell *matHeaderCellDef> S.No. </mat-header-cell>\n    <mat-cell class=\"search-table-mat-cell\" *matCellDef=\"let element\"> {{element.sno}} </mat-cell>\n  </ng-container>\n\n  <ng-container matColumnDef=\"department\">\n    <mat-header-cell *matHeaderCellDef> Department </mat-header-cell>\n    <mat-cell class=\"search-table-mat-cell\" *matCellDef=\"let element\"> {{element.department}} </mat-cell>\n  </ng-container>\n\n  <ng-container matColumnDef=\"quantity\">\n    <mat-header-cell *matHeaderCellDef> Quantity </mat-header-cell>\n    <mat-cell class=\"search-table-mat-cell\" *matCellDef=\"let element\"> {{element.quantity}} </mat-cell>\n  </ng-container>\n\n  <ng-container matColumnDef=\"unit\">\n    <mat-header-cell *matHeaderCellDef> Unit </mat-header-cell>\n    <mat-cell class=\"search-table-mat-cell\" *matCellDef=\"let element\"> {{element.unit.viewValue}} </mat-cell>\n  </ng-container>\n\n  <ng-container matColumnDef=\"dateOfCreation\">\n    <mat-header-cell *matHeaderCellDef> Date Of Creation </mat-header-cell>\n    <mat-cell class=\"search-table-mat-cell\" *matCellDef=\"let element\"> {{element.dateOfCreation | date}} </mat-cell>\n  </ng-container>\n\n  <ng-container matColumnDef=\"dueDateOfReturn\">\n    <mat-header-cell *matHeaderCellDef> Due Date Of Return </mat-header-cell>\n    <mat-cell class=\"search-table-mat-cell\" *matCellDef=\"let element\"> {{element.dueDateOfReturn | date}} </mat-cell>\n  </ng-container>\n\n  <ng-container matColumnDef=\"createdBy\">\n    <mat-header-cell *matHeaderCellDef> Created By </mat-header-cell>\n    <mat-cell class=\"search-table-mat-cell\" *matCellDef=\"let element\"> {{element.createdBy}} </mat-cell>\n  </ng-container>\n\n  <ng-container matColumnDef=\"owner\">\n    <mat-header-cell *matHeaderCellDef> Material Owner </mat-header-cell>\n    <mat-cell class=\"search-table-mat-cell\" *matCellDef=\"let element\"> {{element.owner}} </mat-cell>\n  </ng-container>\n\n  <ng-container matColumnDef=\"movement\">\n    <mat-header-cell *matHeaderCellDef> Movement </mat-header-cell>\n    <mat-cell class=\"search-table-mat-cell\" *matCellDef=\"let element\"> {{element.movement}} </mat-cell>\n  </ng-container>\n\n  <ng-container matColumnDef=\"status\">\n    <mat-header-cell *matHeaderCellDef> Status </mat-header-cell>\n    <mat-cell class=\"search-table-mat-cell\" *matCellDef=\"let element\"> {{element.status}} </mat-cell>\n  </ng-container>\n\n  <ng-container matColumnDef=\"description\">\n    <mat-header-cell *matHeaderCellDef> Material Description </mat-header-cell>\n    <mat-cell class=\"search-table-mat-cell\" *matCellDef=\"let element\"> {{element.description}} </mat-cell>\n  </ng-container>\n\n  <mat-header-row *matHeaderRowDef=\"displayedColumns; sticky: true\"></mat-header-row>\n  <mat-row [@rowsAnimation]=\"\" (click)=\"getRecord(row)\"\n    [class.selected]=\"selectedGpArray && selectedGpArray.gatePassNo === row.id\"\n    *matRowDef=\"let row; columns: displayedColumns;\"></mat-row>\n\n  <!-- <mat-row class=\"mat-row\" *matNoDataRow>\n    <mat-cell class=\"mat-cell\" colspan=\"12\">No data matching the filter \"{{input.value}}\"</mat-cell>\n  </mat-row> -->\n  <tr class=\"mat-row\" *matNoDataRow>\n    <td class=\"mat-cell\" colspan=\"4\">No data matching the filter \"{{input.value}}\"</td>\n  </tr>\n</mat-table>\n<div class=\"row-button\">\n<button mat-raised-button (click)=\"exporter.exportTable('xlsx', {fileName:'reports', sheet: 'gate-pass-listing', Props: {Author: 'GatePassApplication'}})\">Export to Excel</button>\n</div>\n","import { Component, OnInit, Inject } from '@angular/core';\nimport { GpArray } from '../models/gpArray';\nimport { Department } from '../models/department';\nimport { MatTableDataSource } from '@angular/material/table';\nimport { MaterialGatePass } from '../models/gatePass';\nimport { UserService } from '../services/user/user.service';\nimport { PrintService } from '../services/print/print.service';\nimport { MatDialog } from '@angular/material/dialog';\nimport { SelectionModel } from '@angular/cdk/collections';\nimport { User } from '../models/user';\nimport { rowsAnimation } from '../animations/template.animations';\nimport { Router } from '@angular/router';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { Gate } from '../models/gate';\nimport { MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { Unit } from '../models/unit';\nimport pdfMake from 'pdfmake/build/pdfmake';\nimport pdfFonts from 'pdfmake/build/vfs_fonts';\nimport { formatDate } from '@angular/common';\nimport { AbstractControl, ValidatorFn } from '@angular/forms';\nimport { Project } from '../models/project';\npdfMake.vfs = pdfFonts.pdfMake.vfs;\n\ninterface Type {\n  viewValue: string;\n}\ninterface Owner {\n  viewValue: string;\n}\ninterface Movement {\n  viewValue: string;\n}\n// interface Gate {\n//   viewValue: string;\n// }\n\n@Component({\n  selector: 'app-return',\n  templateUrl: './return.component.html',\n  styleUrls: ['./return.component.css'],\n  animations: [rowsAnimation]\n})\nexport class ReturnComponent implements OnInit {\n\n  dcGatePass = ['sno', 'modeOfTransport', 'description', 'quantity', 'unit', 'issuedTo', 'from', 'to', 'reason', 'remark', 'dateOfReturn'];\n  dcGatePassStd = ['sno', 'modeOfTransport', 'description', 'quantity', 'unit', 'issuedTo', 'from', 'to', 'reason', 'remark', 'dateOfReturn'];\n  dcGatePassRet = ['select', 'sno', 'modeOfTransport', 'description', 'quantity', 'quantityRet', 'unit', 'issuedTo', 'from', 'to', 'reason', 'remark', 'incomingRef', 'dateOfReturn',];\n  dcGatePassRetNoCheck = ['sno', 'modeOfTransport', 'description', 'quantity', 'quantityRet', 'unit', 'issuedTo', 'from', 'to', 'reason', 'remark', 'incomingRef', 'dateOfReturn',];\n  dsGatePass: MatTableDataSource<MaterialGatePass>;\n\n  disableTextbox = true;\n  loggedIn: User = this.userService.loggedIn\n  selectedGpArray: GpArray;\n  user: User;\n  returnState = false;\n  dcDate;\n\n  types: Type[] = [\n    { viewValue: 'Returnable' },\n    { viewValue: 'Non-Returnable' },\n  ];\n  owners: Owner[] = [\n    { viewValue: 'NTPC' },\n    { viewValue: 'Vendor' },\n  ];\n  movements: Movement[] = [\n    { viewValue: 'In' },\n    { viewValue: 'Out' },\n    { viewValue: 'Within' },\n  ];\n  gates: Gate[];\n  Units: Unit[];\n  departments: Department[];\n  projects: Project[];\n\n  constructor(private userService: UserService, public dialog: MatDialog, private router: Router, private _snackBar: MatSnackBar, private printService : PrintService) { }\n\n  ngOnInit(): void {\n    this.getDepartments();\n    this.getProjects();\n    if(this.userService.selectedGpArray === undefined) {\n      this.setSelectedGpArray();\n    }\n    else {\n    this.onSelect(this.userService.selectedGpArray);\n    this.gates = this.selectedGpArray.createForm.selectedProject.gates;\n    this.getUnits();\n    }\n  }\n\n  setSelectedGpArray() {\n    this.userService.searchGatePasses(this.userService.getGpNoFromLocal(), '0', this.userService.loggedIn.selectedProject._id)\n      .subscribe((gpArrays) => {\n        this.userService.selectedGpArray = gpArrays[0];\n        this.onSelect( this.userService.selectedGpArray )\n        this.gates = this.selectedGpArray.createForm.selectedProject.gates;\n        this.getUnits();\n      })\n  }\n\n  // selectedGateViewValue;\n  // calcSelectedGate() {\n  //   for(const gate of this.gates) {\n  //     if(this.selectedGpArray.createForm.selectedGate === gate._id) {\n  //       this.selectedGateViewValue = gate.viewValue;\n  //       break;\n  //     }\n  //   }\n  // }\n\n  dateFunc(value) {\n    console.log(value)\n    // this.createForm.controls.selectedType.value\n    for (const dc of this.dcGatePass) {\n      if (dc == \"dateOfReturn\") {\n        this.dcDate = true;\n        break;\n      }\n      else {\n        this.dcDate = false;\n      }\n    }\n    if (value === \"Non-Returnable\" && this.dcDate === true) {\n      this.dcGatePass.pop();\n      this.selectedGpArray.gatePass.forEach(gatePass => {\n        gatePass.dateOfReturn = null;\n      })\n    }\n    else if (value === \"Returnable\" && this.dcDate === false) {\n      this.dcGatePass.push('dateOfReturn');\n    }\n\n  }\n\n  exitBool = false;\n  checkExit() {\n    if (this.loggedIn.selectedUserType === 'Security' && this.selectedGpArray.status === 'Authorized') {\n      this.exitBool = true;\n    }\n    else {\n      this.exitBool = false;\n    }\n  }\n\n  deleteBool = false;\n  checkDelete() {\n    if (this.userService.loggedIn.empId === this.selectedGpArray.createdBy.empId && this.selectedGpArray.status === 'Created') {\n      this.deleteBool = true;\n    }\n    else {\n      this.deleteBool = false;\n    }\n  }\n\n  deleteGatePass() {\n\n    const dialogRef = this.dialog.open(DialogContentReturn, {\n      data: { header: 'Delete Gate Pass', message: 'Are you sure you want to delete Gate Pass?' }\n    });\n    dialogRef.afterClosed().subscribe(result => {\n      // console.log(`Dialog result: ${result}`);\n      if (result == true) {\n        this.userService.deleteGpArray(this.selectedGpArray)\n        .subscribe((gpArray) => {\n          this._snackBar.open(`Gate Pass ${gpArray.gatePassNo} Deleted Successfully`, 'Ok', {\n            duration: 2000,\n          });\n          this.router.navigate(['home'])\n        })\n      }\n\n    });\n\n  }\n\n  getUnits() {\n    this.userService.getUnits()\n      .subscribe(units => this.Units = units);\n  }\n\n  getProjects() {\n    this.userService.getProjects()\n      .subscribe(projects => this.projects = projects)\n  }\n\n  getDepartments() {\n    this.userService.getDepartments()\n      .subscribe(departments => this.departments = departments);\n  }\n\n  selection = new SelectionModel<MaterialGatePass>(true, []);\n  /** Whether the number of selected elements matches the total number of rows. */\n  isAllSelected() {\n    const numSelected = this.selection.selected.length;\n    const numRows = this.dsGatePass.data.length;\n    return numSelected === numRows;\n  }\n\n  /** Selects all rows if they are not all selected; otherwise clear selection. */\n  masterToggle() {\n    this.isAllSelected() ?\n      this.selection.clear() :\n      this.dsGatePass.data.forEach(row => this.selection.select(row));\n  }\n\n  /** The label for the checkbox on the passed row */\n  checkboxLabel(row?: MaterialGatePass): string {\n    if (!row) {\n      return `${this.isAllSelected() ? 'select' : 'deselect'} all`;\n    }\n    return `${this.selection.isSelected(row) ? 'deselect' : 'select'} row ${row.sno + 1}`;\n  }\n\n  createNewGatePass(sno: number): MaterialGatePass {\n    return {\n      sno: sno,\n      modeOfTransport: null, description: null, quantity: null, unit: {_id: null, tolerance: null, viewValue: null},\n      issuedTo: null, dateOfReturn: null, from: null,\n      to: null, reason: null, remark: null, incomingRef: null\n    };\n  }\n\n  // appQuantityRetValidator(quantity: number, tolerance: number): ValidatorFn {\n  //   return (control: AbstractControl): { [key: string]: boolean} | null\n  //   return null;\n  // }\n\n  addRow() {\n    this.dsGatePass.data.push(this.createNewGatePass(this.dsGatePass.data.length + 1));\n    this.dsGatePass.filter = \"\";\n  }\n\n  deleteRow() {\n    this.dsGatePass.data.pop();\n    this.dsGatePass.filter = \"\";\n  }\n\n  toggleEdit() {\n    this.disableTextbox = false;\n  }\n\n\n  toggleReturn() {\n    this.dcGatePass = this.dcGatePassRet;\n    this.returnState = true;\n  }\n\n  exitGp() {\n    if (this.selectedGpArray.status === 'Authorized') {\n      this.selectedGpArray.status = 'Exited'\n      this.updateData('Are you sure you want to exit Gate Pass?')\n    }\n    else {\n      this._snackBar.openFromComponent(ReturnSnackComponent, {\n        duration: 3 * 1000,\n      });\n    }\n  }\n\n  cancel() {\n    this.userService.searchGatePasses(this.selectedGpArray.gatePassNo.toString(), '0', this.userService.loggedIn.selectedProject._id)\n      .subscribe((gpArray) => {\n        this.onSelect(gpArray[0])\n      })\n    this.returnState = false;\n    // this.disableTextbox = true;\n    // this.dcGatePass = this.dcGatePassStd;\n  }\n\n\n  onSelect(gpArray: GpArray): void {\n    console.log(gpArray)\n    this.disableTextbox = true;\n    gpArray.createdBy = this.createdByDetails(gpArray.createdBy, gpArray.createdAt)\n    if (gpArray.authorized != null) {\n      gpArray.authorized = this.authorizedDetails(gpArray.authorized, gpArray.authorizedDate)\n    }\n    this.selectedGpArray = gpArray;\n    this.user = this.selectedGpArray.authorized;\n    // if (this.dcGatePass != this.dcGatePassStd) {\n    //   this.dcGatePass = this.dcGatePassStd;\n    // }\n\n    this.gpStatusCheck();\n    this.gatePassTypeCheck();\n    this.dsGatePass = new MatTableDataSource(this.selectedGpArray.gatePass);\n    this.checkAuth();\n    this.checkEdit();\n    this.checkExit();\n    this.checkReturn();\n    this.checkDelete();\n  }\n\n  gpStatusCheck() {\n    if ((this.selectedGpArray.status === 'Returned' || this.selectedGpArray.status === 'Partially Returned') && this.returnState == false && this.selectedGpArray.createForm.selectedType === 'Returnable') {\n      this.dcGatePass = this.dcGatePassRetNoCheck;\n    }\n    else if (this.selectedGpArray.createForm.selectedType === 'Returnable' && this.returnState == true) {\n      this.dcGatePass = this.dcGatePassRet;\n    }\n    else {\n      this.dcGatePass = this.dcGatePassStd;\n    }\n  }\n\n  gatePassTypeCheck() {\n    for (const dc of this.dcGatePass) {\n      if (dc == \"dateOfReturn\") {\n        this.dcDate = true;\n        break;\n      }\n      else {\n        this.dcDate = false;\n      }\n    }\n    if (this.selectedGpArray.createForm.selectedType === \"Non-Returnable\" && this.dcDate === true) {\n      this.dcGatePass.pop();\n    }\n    else if (this.selectedGpArray.createForm.selectedType === \"Returnable\" && this.dcDate === false) {\n      this.dcGatePass.push('dateOfReturn');\n    }\n  }\n\n  authorizedDetails(authorized: User, authorizedDate: Date) {\n    const iterator4 = authorized.Project[Symbol.iterator]();\n    if (authorized.Project.length > 1) {\n      for (const Pro of iterator4) {\n        if ((authorizedDate >= Pro.from && authorizedDate < Pro.to) || Pro.to === null) {\n          authorized.selectedProject = Pro.selectedProject;\n          break;\n        }\n      }\n    }\n    const iterator5 = authorized.Grade[Symbol.iterator]();\n    if (authorized.Grade.length > 1) {\n      for (const Gra of iterator5) {\n        if ((authorizedDate >= Gra.from && authorizedDate < Gra.to) || Gra.to === null) {\n          authorized.selectedGrade = Gra.selectedGrade;\n          break;\n        }\n      }\n    }\n    const iterator6 = authorized.Department[Symbol.iterator]();\n    if (authorized.Department.length > 1) {\n      for (const Dep of iterator6) {\n        if ((authorizedDate >= Dep.from && authorizedDate < Dep.to) || Dep.to === null) {\n          authorized.selectedDepartment = Dep.selectedDepartment;\n          break;\n        }\n      }\n    }\n    return authorized;\n  }\n\n  createdByDetails(createdBy: User, createdAt: Date) {\n    const iterator = createdBy.Project[Symbol.iterator]();\n    if (createdBy.Project.length > 1) {\n      for (const Pro of iterator) {\n        if ((createdAt >= Pro.from && createdAt < Pro.to) || Pro.to === null) {\n          createdBy.selectedProject = Pro.selectedProject;\n          break;\n        }\n      }\n    }\n\n    const iterator2 = createdBy.Grade[Symbol.iterator]();\n    if (createdBy.Grade.length > 1) {\n      for (const Gra of iterator2) {\n        if ((createdAt >= Gra.from && createdAt < Gra.to) || Gra.to === null) {\n          createdBy.selectedGrade = Gra.selectedGrade;\n          break;\n        }\n      }\n    }\n    const iterator3 = createdBy.Department[Symbol.iterator]();\n    if (createdBy.Department.length > 1) {\n      for (const Dep of iterator3) {\n        if ((createdAt >= Dep.from && createdAt < Dep.to) || Dep.to === null) {\n          createdBy.selectedDepartment = Dep.selectedDepartment;\n          break;\n        }\n      }\n    }\n    return createdBy;\n  }\n\n  editBool;\n  checkEdit() {\n    if (this.userService.loggedIn.empId === this.selectedGpArray.createdBy.empId && this.selectedGpArray.status === 'Created') {\n      this.editBool = true;\n    }\n    else {\n      this.editBool = false;\n    }\n  }\n\n  returnBool = false;\n  checkReturn() {\n    if((this.userService.loggedIn.selectedUserType === 'Security') && (this.selectedGpArray.status === 'Exited' || this.selectedGpArray.status === 'Partially Returned')) {\n      this.returnBool = true;\n    }\n  }\n\n  authBool;\n  checkAuth() {\n    if (!this.userService.loggedIn.selectedAuthorization || this.selectedGpArray.authorized) {\n      this.authBool = false;\n      return;\n    }\n    else {\n      const iterator = this.userService.loggedIn.authorizedTo[Symbol.iterator]();\n      for (const authorizedToo of iterator) {\n        if (authorizedToo.empId === this.selectedGpArray.createdBy.empId) {\n          this.authBool = true;\n        }\n      }\n    }\n  }\n\n  selectedGpArray2: GpArray;\n  toggleAuthorize() {\n    this.selectedGpArray2 = this.selectedGpArray;\n    this.selectedGpArray2.authorized = this.loggedIn;\n    this.selectedGpArray2.status = 'Authorized';\n    // console.log(this.selectedGpArray.authorized)\n    // console.log(this.selectedGpArray)\n    this.userService.updateGpArray(this.selectedGpArray2 as GpArray)\n      .subscribe((updatedGpArray) => {\n        this.onSelect(updatedGpArray)\n        // this.user = updatedGpArray.authorized;\n        // this.selectedGpArray.authorizedDate = updatedGpArray.authorizedDate;\n        // this.authBool = false;\n        // location.reload();\n      })\n  }\n\n  // checkStatus() {\n  //   var counter = 0;\n  //   for (let i=0; i<this.selectedGpArray.gatePass.length; i++) {\n  //     if(this.selectedGpArray.gatePass[i].quantityRet > )\n  //   }\n  // }\n\n  updateData(msg?: string) {\n    const dialogRef = this.dialog.open(DialogContentReturn, {\n      data: { header: 'Update Data', message: msg }\n    });\n    dialogRef.afterClosed().subscribe(result => {\n      // console.log(`Dialog result: ${result}`);\n      if (result == true) {\n        if (this.returnState === true) {\n          this.selectedGpArray.status === 'Returned'\n        }\n        this.userService.updateGpArray(this.selectedGpArray as GpArray)\n          .subscribe((gpArray) => {\n            // location.reload();\n            this.onSelect(gpArray);\n          })\n      }\n      else {\n        if(msg === 'Are you sure you want to exit Gate Pass?') {\n          this.selectedGpArray.status = 'Authorized';\n        }\n      }\n    });\n\n  }\n\n  generatePdf() {\n    this.printService.generatePdf(this.selectedGpArray, 'Return')\n  }\n\n\n}\n\n@Component({\n  selector: 'dialog-content-return',\n  templateUrl: 'dialog-content-return.html',\n})\nexport class DialogContentReturn {\n  constructor(@Inject(MAT_DIALOG_DATA) public data: any) { }\n}\n\n@Component({\n  selector: 'snack-bar-component-returnSnack',\n  templateUrl: 'snack-bar-component-returnSnack.html',\n  styles: [`\n    .user-edited {\n      color: hotpink;\n    }\n  `],\n})\nexport class ReturnSnackComponent { }\n\n@Component({\n  selector: 'snack-bar-component-message',\n  templateUrl: '../snack-bar-component-message.html',\n  styles: [`\n    .example-pizza-party {\n      color: hotpink;\n    }\n  `],\n})\nexport class MessageSnackComponent {}\n","<div *ngIf=\"selectedGpArray\">\n\n  <h2>Gate Pass Number: {{selectedGpArray.gatePassNo}} Details</h2>\n  <h3>Status: {{selectedGpArray.status}}</h3>\n  <div class=\"row-button\">\n    <button mat-mini-fab (click)=\"generatePdf()\" *ngIf=\"selectedGpArray.status=== 'Authorized'\" aria-label=\"fab icon button\">\n      <mat-icon>print</mat-icon>\n    </button>\n    <button mat-mini-fab *ngIf=\"deleteBool\" (click)=\"deleteGatePass()\">\n      <mat-icon>delete</mat-icon>\n    </button>\n  </div>\n  <form #myForm=\"ngForm\">\n    <mat-card class=\"mat-elevation-z8 create-card\">\n      <mat-grid-list cols=\"5\" rowHeight=\"5:1\">\n        <mat-grid-tile>\n          <mat-form-field appearance=\"standard\">\n            <mat-label>Name</mat-label>\n            <input matInput [disabled]='true' [(ngModel)]=\"selectedGpArray.createForm.name\" placeholder=\"Name\"\n              name=\"name\">\n          </mat-form-field>\n        </mat-grid-tile>\n        <mat-grid-tile>\n          <mat-form-field>\n            <mat-label>Department</mat-label>\n            <mat-select [disabled]='true' [(ngModel)]=\"selectedGpArray.createForm.selectedDepartment._id\"\n              name=\"department\">\n              <mat-option *ngFor=\"let department of departments\" [value]=\"department._id\">\n                {{ department.viewValue }}\n              </mat-option>\n            </mat-select>\n          </mat-form-field>\n        </mat-grid-tile>\n\n        <mat-grid-tile>\n          <mat-form-field>\n            <mat-label>Project</mat-label>\n            <mat-select [(ngModel)]=\"selectedGpArray.createForm.selectedProject._id\" name=\"project\" [disabled]=\"true\" >\n              <mat-option *ngFor=\"let project of projects\" [value]=\"project._id\">\n                {{ project.viewValue }}\n              </mat-option>\n            </mat-select>\n          </mat-form-field>\n        </mat-grid-tile>\n\n        <mat-grid-tile>\n          <mat-form-field>\n            <mat-label>Type</mat-label>\n            <mat-select [disabled]='disableTextbox' [(ngModel)]=\"selectedGpArray.createForm.selectedType\" #typeSelect\n              (valueChange)='dateFunc(typeSelect.value)' name=\"type\" required>\n              <mat-option *ngFor=\"let type of types\" [value]=\"type.viewValue\">\n                {{ type.viewValue }}\n              </mat-option>\n            </mat-select>\n          </mat-form-field>\n        </mat-grid-tile>\n\n        <mat-grid-tile>\n          <mat-form-field>\n            <mat-label>Owner</mat-label>\n            <mat-select [disabled]='disableTextbox' [(ngModel)]=\"selectedGpArray.createForm.selectedOwner\" name=\"owner\"\n              required>\n              <mat-option *ngFor=\"let owner of owners\" [value]=\"owner.viewValue\">\n                {{ owner.viewValue }}\n              </mat-option>\n            </mat-select>\n          </mat-form-field>\n        </mat-grid-tile>\n\n        <mat-grid-tile>\n          <mat-form-field>\n            <mat-label>Movement</mat-label>\n            <mat-select [disabled]='disableTextbox' [(ngModel)]=\"selectedGpArray.createForm.selectedMovement\"\n              name=\"movement\" required>\n              <mat-option *ngFor=\"let movement of movements\" [value]=\"movement.viewValue\">\n                {{ movement.viewValue }}\n              </mat-option>\n            </mat-select>\n          </mat-form-field>\n        </mat-grid-tile>\n\n        <mat-grid-tile>\n          <mat-form-field>\n            <mat-label>Gate</mat-label>\n            <mat-select [disabled]='disableTextbox' [(ngModel)]=\"selectedGpArray.createForm.selectedGate\" name=\"gate\"\n              required>\n              <mat-option *ngFor=\"let gate of gates\" [value]=\"gate._id\">\n                {{ gate.viewValue }}\n              </mat-option>\n            </mat-select>\n          </mat-form-field>\n        </mat-grid-tile>\n\n        <mat-grid-tile>\n          <mat-form-field appearance=\"standard\">\n            <mat-label>Receiver</mat-label>\n            <input matInput [disabled]='disableTextbox' [(ngModel)]=\"selectedGpArray.createForm.receiver\"\n              placeholder=\"Receiver\" name=\"receiver\" required />\n          </mat-form-field>\n        </mat-grid-tile>\n\n        <mat-grid-tile>\n          <mat-form-field appearance=\"standard\">\n            <mat-label>Firm Represented</mat-label>\n            <input matInput [disabled]='disableTextbox' [(ngModel)]=\"selectedGpArray.createForm.firm\"\n              placeholder=\"Firm Represented\" name=\"firm\" required />\n          </mat-form-field>\n        </mat-grid-tile>\n\n          <mat-grid-tile *ngIf=\"selectedGpArray.createForm.selectedOwner == owners[1].viewValue\">\n            <mat-form-field appearance=\"standard\">\n              <mat-label>Vendor Name</mat-label>\n              <input matInput [disabled]='disableTextbox' [(ngModel)]=\"selectedGpArray.createForm.vendorName\" placeholder=\"Vendor Name\" name=\"vendor\" required/>\n            </mat-form-field>\n          </mat-grid-tile>\n\n\n      </mat-grid-list>\n    </mat-card>\n    <br>\n    <div class=\"row-button\">\n      <button mat-raised-button type=\"button\" *ngIf=\"!disableTextbox\" (click)=\"addRow()\">Add row</button>\n      <button mat-raised-button type=\"button\" *ngIf=\"!disableTextbox\" (click)=\"deleteRow()\"\n        [disabled]=\"selectedGpArray.gatePass.length == 1\">Delete row</button>\n      <button mat-raised-button type=\"button\" *ngIf=\"!disableTextbox || returnState\" (click)=\"cancel()\">Cancel</button>\n      <button mat-raised-button type=\"button\" color=\"accent\" *ngIf=\"!disableTextbox || returnState\"\n        [disabled]=\"myForm.invalid\" (click)=\"updateData('Are you sure you want to update Gate Pass?')\">Update</button>\n      <button mat-raised-button type=\"button\" color=\"accent\" (click)=\"toggleAuthorize()\"\n        *ngIf=\"authBool && disableTextbox\">Authorize</button>\n      <button mat-raised-button type=\"button\" color=\"accent\" (click)=\"exitGp()\"\n        *ngIf=\"disableTextbox && exitBool\">Exit</button>\n      <button mat-raised-button type=\"button\" color=\"primary\"\n        *ngIf=\"selectedGpArray.createForm.selectedType === 'Returnable' && !returnState && disableTextbox && returnBool\"\n        (click)=\"toggleReturn()\">Return</button>\n      <button mat-raised-button type=\"button\" color=\"primary\" *ngIf=\"editBool && disableTextbox\"\n        (click)=\"toggleEdit()\">Edit</button>\n    </div>\n    <div class=\"example-container mat-elevation-z8\">\n      <mat-table [dataSource]=\"dsGatePass\">\n\n        <!-- Checkbox Column -->\n        <ng-container matColumnDef=\"select\">\n          <mat-header-cell *matHeaderCellDef>\n            <mat-checkbox (change)=\"$event ? masterToggle() : null\" [checked]=\"selection.hasValue() && isAllSelected()\"\n              [indeterminate]=\"selection.hasValue() && !isAllSelected()\" [aria-label]=\"checkboxLabel()\"\n              class=\"chk-box-header\">\n            </mat-checkbox>\n          </mat-header-cell>\n          <mat-cell *matCellDef=\"let element\" class=\"first chk-box\">\n            <mat-checkbox (click)=\"$event.stopPropagation()\" (change)=\"$event ? selection.toggle(element) : null\"\n              [checked]=\"selection.isSelected(element)\" [aria-label]=\"checkboxLabel(element)\">\n            </mat-checkbox>\n          </mat-cell>\n        </ng-container>\n\n        <ng-container matColumnDef=\"sno\">\n          <mat-header-cell *matHeaderCellDef class=\"first\"> SNo. </mat-header-cell>\n          <mat-cell *matCellDef=\"let element\" class=\"first\">\n            {{element.sno}}\n          </mat-cell>\n        </ng-container>\n\n        <ng-container matColumnDef=\"modeOfTransport\">\n          <mat-header-cell *matHeaderCellDef> Mode Of Transport </mat-header-cell>\n          <mat-cell *matCellDef=\"let element; let i = index;\">\n            <mat-form-field> <input matInput type=\"text\" [disabled]='disableTextbox'\n                [(ngModel)]=\"element.modeOfTransport\" name=\"modeOfTransport-{{i}}\" required /></mat-form-field>\n          </mat-cell>\n        </ng-container>\n\n        <ng-container matColumnDef=\"description\">\n          <mat-header-cell *matHeaderCellDef> Description </mat-header-cell>\n          <mat-cell *matCellDef=\"let element; let i = index;\">\n            <mat-form-field> <input matInput type=\"text\" [disabled]='disableTextbox' [(ngModel)]=\"element.description\"\n                name=\"description-{{i}}\" required />\n            </mat-form-field>\n          </mat-cell>\n        </ng-container>\n\n        <ng-container matColumnDef=\"quantity\">\n          <mat-header-cell *matHeaderCellDef> Quantity </mat-header-cell>\n          <mat-cell *matCellDef=\"let element; let i = index;\">\n            <mat-form-field> <input matInput type=\"number\" [disabled]='disableTextbox' [(ngModel)]=\"element.quantity\"\n                name=\"quantity-{{i}}\" required />\n            </mat-form-field>\n          </mat-cell>\n        </ng-container>\n\n        <ng-container matColumnDef=\"quantityRet\">\n          <mat-header-cell *matHeaderCellDef> Quantity Returned </mat-header-cell>\n          <mat-cell *matCellDef=\"let element; let i = index;\">\n            <mat-form-field> <input matInput type=\"number\" [disabled]='!selection.isSelected(element)'\n                [(ngModel)]=\"element.quantityRet\" name=\"quantityRet-{{i}}\" required\n                appQuantityRetValidator=\"{{element.quantity}} {{element.unit.tolerance}}\" />\n            </mat-form-field>\n          </mat-cell>\n        </ng-container>\n\n        <ng-container matColumnDef=\"unit\">\n          <mat-header-cell *matHeaderCellDef> Unit </mat-header-cell>\n          <mat-cell *matCellDef=\"let element; let i = index;\">\n            <mat-form-field>\n              <mat-select [disabled]='disableTextbox' [(ngModel)]=\"element.unit._id\" name=\"unit-{{i}}\" required>\n                <mat-option *ngFor=\"let Unit of Units\" [value]=\"Unit._id\">\n                  {{ Unit.viewValue }}\n                </mat-option>\n              </mat-select>\n            </mat-form-field>\n          </mat-cell>\n        </ng-container>\n\n        <ng-container matColumnDef=\"issuedTo\">\n          <mat-header-cell *matHeaderCellDef> Issued To </mat-header-cell>\n          <mat-cell *matCellDef=\"let element; let i = index;\">\n            <mat-form-field> <input matInput type=\"text\" [disabled]='disableTextbox' [(ngModel)]=\"element.issuedTo\"\n                name=\"issuedTo-{{i}}\" required />\n            </mat-form-field>\n          </mat-cell>\n        </ng-container>\n\n        <ng-container matColumnDef=\"dateOfReturn\">\n          <mat-header-cell *matHeaderCellDef> Date Of Return </mat-header-cell>\n          <mat-cell *matCellDef=\"let element; let i = index;\">\n            <input matInput [matDatepicker]=\"picker1\" [disabled]='disableTextbox' [(ngModel)]=\"element.dateOfReturn\"\n              name=\"dateOfReturn-{{i}}\" required readonly='true'>\n            <mat-datepicker-toggle matSuffix [for]=\"picker1\"></mat-datepicker-toggle>\n            <mat-datepicker #picker1></mat-datepicker>\n          </mat-cell>\n        </ng-container>\n        <ng-container matColumnDef=\"from\">\n          <mat-header-cell *matHeaderCellDef> From </mat-header-cell>\n          <mat-cell *matCellDef=\"let element; let i = index;\">\n            <mat-form-field> <input matInput type=\"text\" [disabled]='disableTextbox' [(ngModel)]=\"element.from\"\n                name=\"from-{{i}}\" required />\n            </mat-form-field>\n          </mat-cell>\n        </ng-container>\n\n        <ng-container matColumnDef=\"to\">\n          <mat-header-cell *matHeaderCellDef> To </mat-header-cell>\n          <mat-cell *matCellDef=\"let element; let i = index;\">\n            <mat-form-field> <input matInput type=\"text\" [disabled]='disableTextbox' [(ngModel)]=\"element.to\"\n                name=\"to-{{i}}\" required />\n            </mat-form-field>\n          </mat-cell>\n        </ng-container>\n\n        <ng-container matColumnDef=\"reason\">\n          <mat-header-cell *matHeaderCellDef> Reason </mat-header-cell>\n          <mat-cell *matCellDef=\"let element; let i = index;\">\n            <mat-form-field> <input matInput type=\"text\" [disabled]='disableTextbox' [(ngModel)]=\"element.reason\"\n                name=\"reason-{{i}}\" required />\n            </mat-form-field>\n          </mat-cell>\n        </ng-container>\n\n        <ng-container matColumnDef=\"remark\">\n          <mat-header-cell *matHeaderCellDef> Remark </mat-header-cell>\n          <mat-cell *matCellDef=\"let element; let i = index;\">\n            <mat-form-field> <input matInput type=\"text\" [disabled]='disableTextbox' [(ngModel)]=\"element.remark\"\n                name=\"remark-{{i}}\" required />\n            </mat-form-field>\n          </mat-cell>\n        </ng-container>\n\n        <ng-container matColumnDef=\"incomingRef\">\n          <mat-header-cell *matHeaderCellDef> Incoming Reference </mat-header-cell>\n          <mat-cell *matCellDef=\"let element; let i = index;\" class=\"last\">\n            <mat-form-field> <input matInput type=\"text\" [disabled]='!selection.isSelected(element)'\n                [(ngModel)]=\"element.incomingRef\" name=\"incomingRef-{{i}}\" required />\n            </mat-form-field>\n          </mat-cell>\n        </ng-container>\n        <mat-header-row *matHeaderRowDef=\"dcGatePass; sticky: true\"></mat-header-row>\n        <mat-row [@rowsAnimation]=\"\" *matRowDef=\"let row; columns: dcGatePass;\"></mat-row>\n      </mat-table>\n    </div>\n  </form>\n  <br>\n  <div class=\"row-button\">\n    <div *ngIf=\"selectedGpArray.authorized && selectedGpArray.authorizedDate\">\n      <mat-card class=\"user-card example-container mat-elevation-z8\">\n        <mat-card-header class=\"header\">\n          <mat-card-title>Authorized By:</mat-card-title>\n        </mat-card-header>\n        <mat-card-content>\n          <div class=\"row\">\n            Employee id: {{user.empId}}\n          </div>\n          <div class=\"row\">\n            Name: {{user.name}}\n          </div>\n          <div class=\"row\">\n            Deparment: {{user.selectedDepartment.viewValue}}\n          </div>\n          <div class=\"row\">\n            Grade: {{user.selectedGrade.viewValue}}\n          </div>\n          <div class=\"row\">\n            Project: {{user.selectedProject.viewValue}}\n          </div>\n          <div class=\"row\">\n            Date: {{selectedGpArray.authorizedDate | date}}\n          </div>\n          <div class=\"row\">\n            Time: {{selectedGpArray.authorizedDate | date:'shortTime'}}\n          </div>\n        </mat-card-content>\n        <!-- <mat-card-actions class=\"button\">\n    <button mat-raised-button color=\"primary\" type=\"submit\">Submit</button>\n  </mat-card-actions> -->\n      </mat-card>\n    </div>\n    <mat-card class=\"user-card example-container mat-elevation-z8\">\n      <mat-card-header class=\"header\">\n        <mat-card-title>Created By:</mat-card-title>\n      </mat-card-header>\n      <mat-card-content>\n        <div class=\"row\">\n          Employee id: {{selectedGpArray.createdBy.empId}}\n        </div>\n        <div class=\"row\">\n          Name: {{selectedGpArray.createdBy.name}}\n        </div>\n        <div class=\"row\">\n          Deparment: {{selectedGpArray.createdBy.selectedDepartment.viewValue}}\n        </div>\n        <div class=\"row\">\n          Grade: {{selectedGpArray.createdBy.selectedGrade.viewValue}}\n        </div>\n        <div class=\"row\">\n          Project: {{selectedGpArray.createdBy.selectedProject.viewValue}}\n        </div>\n        <div class=\"row\">\n          Date: {{selectedGpArray.createdAt | date}}\n        </div>\n        <div class=\"row\">\n          Time: {{selectedGpArray.createdAt | date:'shortTime'}}\n        </div>\n      </mat-card-content>\n    </mat-card>\n  </div>\n</div>\n","<h2 mat-dialog-title>{{data.header}}</h2>\r\n<mat-dialog-content class=\"mat-typography\">\r\n  <p>{{data.message}}</p>\r\n</mat-dialog-content>\r\n<mat-dialog-actions align=\"end\">\r\n  <button mat-button mat-dialog-close>Cancel</button>\r\n  <button mat-button [mat-dialog-close]=\"true\" cdkFocusInitial>Ok</button>\r\n</mat-dialog-actions>\r\n","<span class=\"user-edited\">\r\n  <mat-icon aria-hidden=\"false\" aria-label=\"Warning Icon\">warning</mat-icon>\r\n  You cannot exit this Gate Pass!\r\n</span>\r\n\r\n","import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class MessageService {\n\n  messages: string[] = [];\n\n  add(message: string) {\n    this.messages.push(message);\n  }\n\n  clear() {\n    this.messages = [];\n  }\n}\n","import { Injectable } from '@angular/core';\nimport pdfMake from 'pdfmake/build/pdfmake';\nimport pdfFonts from 'pdfmake/build/vfs_fonts';\nimport { formatDate } from '@angular/common';\nimport { MaterialGatePass } from '../../models/gatePass';\nimport { GpArray } from '../../models/gpArray';\nimport { User } from '../../models/user';\nimport { Gate } from '../../models/gate';\nimport { Project } from '../../models/project';\npdfMake.vfs = pdfFonts.pdfMake.vfs;\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class PrintService {\n\n  constructor() { }\n\n  gates: Gate[];\n  selectedGateViewValue: String;\n\n  calcSelectedGate(selectedGateId: string, selectedProject: Project) {\n    this.gates = selectedProject.gates;\n    const gate = this.gates.find((gate) => gate._id === selectedGateId)\n    this.selectedGateViewValue = gate.viewValue;\n  }\n\n  getGatePassObject(gatePass: MaterialGatePass[], selectedType: String) {\n    if (selectedType === 'Returnable') {\n      return {\n        table: {\n          // headerRows: 1,\n          widths: ['*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*'],\n          body: [\n            [{\n              text: 'SNo.',\n              style: 'tableHeader'\n            },\n            {\n              text: 'Mode Of Transport',\n              style: 'tableHeader'\n            },\n            {\n              text: 'Description',\n              style: 'tableHeader'\n            },\n            {\n              text: 'Quantity',\n              style: 'tableHeader'\n            },\n            {\n              text: 'Unit',\n              style: 'tableHeader'\n            },\n            {\n              text: 'Issued To',\n              style: 'tableHeader'\n            },\n            {\n              text: 'From',\n              style: 'tableHeader'\n            },\n            {\n              text: 'To',\n              style: 'tableHeader'\n            },\n            {\n              text: 'Reason',\n              style: 'tableHeader'\n            },\n            {\n              text: 'Remark',\n              style: 'tableHeader'\n            },\n            {\n              text: 'Date Of Return',\n              style: 'tableHeader'\n            },\n            ],\n            ...gatePass.map(gp => {\n              var date = formatDate(gp.dateOfReturn, 'dd-MM-yyyy', 'en-US', '+0530');\n              return [gp.sno, gp.modeOfTransport, gp.description, gp.quantity, gp.unit.viewValue, gp.issuedTo, gp.from, gp.to, gp.reason, gp.remark, date];\n            })\n            //, gp.unit\n          ]\n        }\n      };\n    }\n    else {\n      return {\n        table: {\n          // headerRows: 1,\n          widths: ['*', '*', '*', '*', '*', '*', '*', '*', '*', '*'],\n          body: [\n            [{\n              text: 'SNo.',\n              style: 'tableHeader'\n            },\n            {\n              text: 'Mode Of Transport',\n              style: 'tableHeader'\n            },\n            {\n              text: 'Description',\n              style: 'tableHeader'\n            },\n            {\n              text: 'Quantity',\n              style: 'tableHeader'\n            },\n            {\n              text: 'Unit',\n              style: 'tableHeader'\n            },\n            {\n              text: 'Issued To',\n              style: 'tableHeader'\n            },\n            {\n              text: 'From',\n              style: 'tableHeader'\n            },\n            {\n              text: 'To',\n              style: 'tableHeader'\n            },\n            {\n              text: 'Reason',\n              style: 'tableHeader'\n            },\n            {\n              text: 'Remark',\n              style: 'tableHeader'\n            },\n            ],\n            ...gatePass.map(gp => {\n              return [gp.sno, gp.modeOfTransport, gp.description, gp.quantity, gp.unit.viewValue, gp.issuedTo, gp.from, gp.to, gp.reason, gp.remark];\n            })\n            //, gp.unit\n          ]\n        }\n      };\n    }\n  }\n\n  getAuthorizedByHeaderObject(authorized: User) {\n    if (authorized) {\n      return {\n        text: 'Authorized By: ',\n        style: 'header'\n      }\n    }\n  }\n\n  getAuthorizedByObject(authorized: User, authorizedDate: Date) {\n    if (authorized) {\n      const exs = [];\n      var authorizedAtDate = formatDate(authorizedDate, 'dd-MM-yyyy', 'en-US', '+0530');\n      var authorizedAtTime = formatDate(authorizedDate, 'hh:mm:ss a', 'en-US', '+0530');\n      exs.push(\n        [{\n          columns: [\n            [{\n              text: 'Employee id: ' + authorized.empId\n            },\n            {\n              text: 'Name: ' + authorized.name\n            },\n            {\n              text: 'Department: ' + authorized.selectedDepartment.viewValue\n            },\n            {\n              text: 'Grade: ' + authorized.selectedGrade.viewValue\n            },\n            {\n              text: 'Project: ' + authorized.selectedProject.viewValue\n            },\n            {\n              text: 'Date: ' + authorizedAtDate\n            },\n            {\n              text: 'Time: ' + authorizedAtTime\n            },\n            ]\n          ]\n        }]\n      )\n\n      return {\n        table: {\n          widths: ['auto'],\n          body: [\n            ...exs\n          ]\n        },\n      }\n    }\n  }\n\n  getCreatedByObject(createdBy: User, createdAt: Date) {\n    const exs = [];\n    var createdAtDate = formatDate(createdAt, 'dd-MM-yyyy', 'en-US', '+0530');\n    var createdAtTime = formatDate(createdAt, 'hh:mm:ss a', 'en-US', '+0530');\n    exs.push(\n      [{\n        columns: [\n          [{\n            text: 'Employee id: ' + createdBy.empId\n          },\n          {\n            text: 'Name: ' + createdBy.name\n          },\n          {\n            text: 'Department: ' + createdBy.selectedDepartment.viewValue\n          },\n          {\n            text: 'Grade: ' + createdBy.selectedGrade.viewValue\n          },\n          {\n            text: 'Project: ' + createdBy.selectedProject.viewValue\n          },\n          {\n            text: 'Date: ' + createdAtDate\n          },\n          {\n            text: 'Time: ' + createdAtTime\n          },\n          ]\n        ]\n      }]\n    )\n\n    return {\n      table: {\n        widths: ['auto'],\n        body: [\n          ...exs\n        ]\n      }\n    }\n  }\n\n  getDocumentDefinition(gpArray: GpArray, selectedGateViewValue: String) {\n\n    sessionStorage.setItem('gpArray', JSON.stringify(gpArray));\n\n    return {\n      pageOrientation: 'landscape',\n      content: [\n        {\n          text: 'NTPC ' + gpArray.createForm.selectedProject.viewValue + ' Gate Pass System',\n          bold: true,\n          fontSize: 20,\n          alignment: 'center',\n          margin: [0, 0, 0, 15]\n        },\n        {\n          text: 'Gate Pass Number ' + gpArray.gatePassNo,\n          bold: true,\n          fontSize: 16,\n          alignment: 'center',\n          margin: [0, 0, 0, 10]\n        },\n        {\n          text: 'Status: ' + gpArray.status,\n          bold: true,\n          fontSize: 12,\n          alignment: 'center',\n          margin: [0, 0, 0, 20]\n        },\n        {\n          columns: [\n            [{\n              text: 'Name : ' + gpArray.createForm.name,\n              //  style: 'name',\n            },\n            {\n              text: 'Movement : ' + gpArray.createForm.selectedMovement,\n            }],\n            [\n              {\n                text: 'Department : ' + gpArray.createForm.selectedDepartment.viewValue,\n              },\n              {\n                text: 'Gate : ' + selectedGateViewValue,\n              }\n            ],\n            [\n              {\n                text: 'Type : ' + gpArray.createForm.selectedType,\n              },\n              {\n                text: 'Firm Represented : ' + gpArray.createForm.firm,\n              },\n            ],\n            [{\n              text: 'Project : ' + gpArray.createForm.selectedProject.viewValue,\n            },\n            {\n              text: 'Receiver : ' + gpArray.createForm.receiver,\n            },\n            ],\n            [\n              {\n                text: 'Owner : ' + gpArray.createForm.selectedOwner\n              },\n              {\n                text: 'Vendor Name : ' + gpArray.createForm.vendorName\n              }\n            ],\n          ],\n          margin: [0, 0, 0, 20],\n        },\n\n        this.getGatePassObject(gpArray.gatePass, gpArray.createForm.selectedType),\n        // {\n        //   pageOrientation: 'landscape',\n        // }\n        {\n          columns: [\n            [\n              {\n                text: 'Created By: ',\n                style: 'header'\n              },\n              this.getCreatedByObject(gpArray.createdBy, gpArray.createdAt),\n            ],\n            [\n              this.getAuthorizedByHeaderObject(gpArray.authorized),\n\n              this.getAuthorizedByObject(gpArray.authorized, gpArray.authorizedDate),\n            ]\n          ]\n        }\n\n      ],\n      info: {\n        title: 'Gate-Pass-' + gpArray.gatePassNo,\n        author: gpArray.createdBy.name,\n        subject: 'Gate Pass',\n        keywords: 'GATE PASS, MATERIAL GATE PASS',\n      },\n      styles: {\n        name: {\n          fontSize: 16,\n          bold: true\n        },\n        tableHeader: {\n          bold: true,\n        },\n        header: {\n          fontSize: 14,\n          bold: true,\n          margin: [0, 20, 0, 10]\n        },\n        // gatePass__header {\n        //   margin: [0, 0, 0, 15]\n        // }\n      },\n    };\n  }\n\n  generatePdf(gpArray: GpArray, source: string) {\n    this.calcSelectedGate(gpArray.createForm.selectedGate, gpArray.createdBy.selectedProject)\n    if (source === 'Print') {\n      gpArray.createdBy = this.createdByDetails(gpArray.createdBy, gpArray.createdAt)\n      gpArray.authorized = this.authorizedDetails(gpArray.authorized, gpArray.authorizedDate)\n    }\n    const documentDefinition = this.getDocumentDefinition(gpArray, this.selectedGateViewValue);\n    // const documentDefinition = { content: 'This is a test PDF'};\n    pdfMake.createPdf(documentDefinition).open();\n  }\n\n  authorizedDetails(authorized: User, authorizedDate: Date) {\n    const iterator4 = authorized.Project[Symbol.iterator]();\n    if (authorized.Project.length > 1) {\n      for (const Pro of iterator4) {\n        if ((authorizedDate >= Pro.from && authorizedDate < Pro.to) || Pro.to === null) {\n          authorized.selectedProject = Pro.selectedProject;\n          break;\n        }\n      }\n    }\n    const iterator5 = authorized.Grade[Symbol.iterator]();\n    if (authorized.Grade.length > 1) {\n      for (const Gra of iterator5) {\n        if ((authorizedDate >= Gra.from && authorizedDate < Gra.to) || Gra.to === null) {\n          authorized.selectedGrade = Gra.selectedGrade;\n          break;\n        }\n      }\n    }\n    const iterator6 = authorized.Department[Symbol.iterator]();\n    if (authorized.Department.length > 1) {\n      for (const Dep of iterator6) {\n        if ((authorizedDate >= Dep.from && authorizedDate < Dep.to) || Dep.to === null) {\n          authorized.selectedDepartment = Dep.selectedDepartment;\n          break;\n        }\n      }\n    }\n    return authorized;\n  }\n\n  createdByDetails(createdBy: User, createdAt: Date) {\n    const iterator = createdBy.Project[Symbol.iterator]();\n    if (createdBy.Project.length > 1) {\n      for (const Pro of iterator) {\n        if ((createdAt >= Pro.from && createdAt < Pro.to) || Pro.to === null) {\n          createdBy.selectedProject = Pro.selectedProject;\n          break;\n        }\n      }\n    }\n\n    const iterator2 = createdBy.Grade[Symbol.iterator]();\n    if (createdBy.Grade.length > 1) {\n      for (const Gra of iterator2) {\n        if ((createdAt >= Gra.from && createdAt < Gra.to) || Gra.to === null) {\n          createdBy.selectedGrade = Gra.selectedGrade;\n          break;\n        }\n      }\n    }\n    const iterator3 = createdBy.Department[Symbol.iterator]();\n    if (createdBy.Department.length > 1) {\n      for (const Dep of iterator3) {\n        if ((createdAt >= Dep.from && createdAt < Dep.to) || Dep.to === null) {\n          createdBy.selectedDepartment = Dep.selectedDepartment;\n          break;\n        }\n      }\n    }\n    return createdBy;\n  }\n\n}\n","import { Injectable } from '@angular/core';\nimport { User } from '../../models/user';\nimport { Project } from '../../models/project';\nimport { Observable, of } from 'rxjs';\nimport { MessageService } from '../message/message.service';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { catchError, map, mapTo, tap } from 'rxjs/operators';\nimport { Department } from '../../models/department';\nimport { Grade } from '../../models/grade';\nimport { MaterialGatePass } from '../../models/gatePass';\nimport { Create } from '../../models/create';\nimport { GpArray } from '../../models/gpArray';\nimport { SearchTable } from '../../models/searchTable';\nimport { Gate } from '../../models/gate';\nimport { Unit } from '../../models/unit';\nimport { Filter } from '../../models/filter';\nimport { Tokens } from '../../models/tokens';\nimport { UserJwt } from '../../models/UserJwt';\nimport { AppComponent } from 'src/app/app.component';\nimport { MatSnackBar } from '@angular/material/snack-bar';\n@Injectable({\n  providedIn: 'root'\n})\nexport class UserService {\n\n  constructor(private http: HttpClient, private messageService: MessageService, public _snackBar: MatSnackBar) { }\n\n  private usersUrl = 'http://localhost:5500/api';\n  public loggedIn: User = this.checkLoggedIn();\n  public gpArrays: GpArray[];\n  public selectedGpArray: GpArray;\n  private readonly JWT_TOKEN = 'JWT_TOKEN';\n  private readonly REFRESH_TOKEN = 'REFRESH_TOKEN';\n  private readonly USER: User;\n  private readonly filter: Filter;\n\n  httpOptions = {\n    headers: new HttpHeaders({ 'Content-Type': 'application/json' })\n  };\n\n  checkLoggedIn() {\n    return JSON.parse(localStorage.getItem('USER'))\n\n  }\n\n  getUsers(): Observable<User[]> {\n    const url = `${this.usersUrl}/users`;\n    this.messageService.add('UserService: fetched users');\n    return this.http.get<User[]>(url)\n      .pipe(\n        tap(_ => this.log('fetched users')),\n        catchError(this.handleError<User[]>('getUsers', []))\n      );\n  }\n\n  getAuthUsers(selectedAuthorization: boolean): Observable<User[]> {\n    const url = `${this.usersUrl}/authUsers/${selectedAuthorization}`;\n    this.messageService.add('UserService: fetched authUsers');\n    return this.http.get<User[]>(url)\n      .pipe(\n        tap(_ => this.log('fetched authUsers')),\n        catchError(this.handleError<User[]>('getAuthUsers', []))\n      );\n  }\n\n  addAuthorization(authId: string, uId: User): Observable<any> {\n    console.log(authId, uId)\n    const url = `${this.usersUrl}/addAuthorization/${authId}`;\n    return this.http.post(url, uId, this.httpOptions).pipe(\n      tap(_ => this.log(`Added Authorization`)),\n      catchError(this.handleError<any>('addAuthorization'))\n    );\n  }\n\n\n  getProjects(): Observable<Project[]> {\n    const url = `${this.usersUrl}/projects`;\n    this.messageService.add('UserService: fetched projects');\n    return this.http.get<Project[]>(url)\n      .pipe(\n        tap(_ => this.log('fetched projects')),\n        catchError(this.handleError<Project[]>('getProjects', []))\n      );\n  }\n\n  getDepartments(): Observable<Department[]> {\n    const url = `${this.usersUrl}/departments`;\n    this.messageService.add('UserService: fetched departments');\n    return this.http.get<Department[]>(url)\n      .pipe(\n        tap(_ => this.log('fetched departments')),\n        catchError(this.handleError<Department[]>('getDepartments', []))\n      );\n  }\n\n  getUnits(): Observable<Unit[]> {\n    const url = `${this.usersUrl}/units`;\n    this.messageService.add('UserService: fetched units');\n    return this.http.get<Unit[]>(url)\n      .pipe(\n        tap(_ => this.log('fetched units')),\n        catchError(this.handleError<Department[]>('getUnits', []))\n      );\n  }\n\n  getGatePasses(): Observable<MaterialGatePass[]> {\n    const url = `${this.usersUrl}/gatepass/getall`;\n    this.messageService.add('UserService: fetched gatePasses');\n    return this.http.get<MaterialGatePass[]>(url)\n      .pipe(\n        tap(_ => this.log('fetched gatePasses')),\n        catchError(this.handleError<MaterialGatePass[]>('getGatePasses', []))\n      );\n  }\n\n  getGpArray(): Observable<GpArray[]> {\n    const url = `${this.usersUrl}/gatepass/GpArray/getall`;\n    this.messageService.add('UserService: fetched GpArray');\n    return this.http.get<GpArray[]>(url)\n      .pipe(\n        tap(_ => this.log('fetched GpArray')),\n        catchError(this.handleError<GpArray[]>('getGpArray', []))\n      );\n  }\n\n  getFilterGpArray( filterForm: Filter ): Observable<any> {\n    console.log(filterForm)\n    const url = `${this.usersUrl}/gatepass/GpArray/filter`;\n    this.storeFilter(filterForm)\n    return this.http.post(url, filterForm, this.httpOptions).pipe(\n      tap(_ => this.log(`Received Filtered GpArray`)),\n      catchError(this.handleError<any>('getFilterGpArray'))\n    );\n  }\n\n  getInboxGpArray( authToId: string[] ): Observable<any> {\n    console.log(authToId)\n    const url = `${this.usersUrl}/gatepass/GpArray/inbox`;\n    return this.http.post(url, authToId, this.httpOptions).pipe(\n      tap(_ => this.log(`Received Inbox GpArrays`)),\n      catchError(this.handleError<any>('getInboxGpArray'))\n    );\n  }\n\n  getInboxAuthGpArray( authId: string ): Observable<any> {\n    console.log(authId)\n    const url = `${this.usersUrl}/gatepass/GpArray/inbox/${authId}`;\n    return this.http.get<GpArray[]>(url).pipe(\n      tap(_ => this.log(`Received Inbox Authorized GpArrays`)),\n      catchError(this.handleError<any>('getInboxGpArray'))\n    );\n  }\n\n  private storeFilter( filterForm: Filter ) {\n    // localStorage.setItem(this.filter, filterForm);\n    localStorage.setItem('filter', JSON.stringify(filterForm))\n  }\n\n  getFilter() {\n    // return localStorage.getItem(this.filter)\n    return JSON.parse(localStorage.getItem('filter'))\n  }\n\n  storeGpArray(gatePassNoNum: Number) {\n    const gatePassNo = String(gatePassNoNum)\n    // localStorage.setItem('gatePassNo', JSON.stringify(gatePassNo))\n    localStorage.setItem('gatePassNo', gatePassNo)\n  }\n\n  private storeUser(user: User) {\n    localStorage.setItem('USER', JSON.stringify(user))\n  }\n\n  getGpNoFromLocal() {\n    // return JSON.parse(localStorage.getItem('gatePassNo'))\n    return localStorage.getItem('gatePassNo')\n  }\n\n  updateGpArray(gpArray: GpArray): Observable<any> {\n    const url = `${this.usersUrl}/gatepass/GpArray/update`;\n    return this.http.put(url, gpArray, this.httpOptions).pipe(\n      tap(_ => this.log(`updated GpArray id=${gpArray._id}`)),\n      catchError(this.handleError<any>('updateGpArray'))\n    );\n  }\n\n  addDepartment(department: Department): Observable<Department> {\n    console.log(department)\n    const url = `${this.usersUrl}/department/add`;\n    return this.http.post(url, department, this.httpOptions).pipe(\n      tap((newDepartment: Department) => this.log(`added department w/ id=${newDepartment._id}`)),\n      catchError(this.handleError<any>('addDepartment'))\n    );\n  }\n\n  updateDepartment(department: Department): Observable<any> {\n    console.log(department)\n    const url = `${this.usersUrl}/department/update`;\n    return this.http.put(url, department, this.httpOptions).pipe(\n      tap(_ => this.log(`updated department id=${department._id}`)),\n      catchError(this.handleError<any>('updateDepartment'))\n    );\n  }\n\n  deleteDepartment(department: Department): Observable<Department> {\n    const id = department._id;\n    const url = `${this.usersUrl}/department/delete/${id}`;\n    return this.http.delete<Department>(url, this.httpOptions).pipe(\n      tap(_ => this.log(`deleted department id=${id}`)),\n      catchError(this.handleError<Department>('deleteDepartment'))\n    );\n  }\n\n  addGrade(grade: Grade): Observable<Grade> {\n    console.log(grade)\n    const url = `${this.usersUrl}/grade/add`;\n    return this.http.post(url, grade, this.httpOptions).pipe(\n      tap((newGrade: Grade) => this.log(`added grade w/ id=${newGrade._id}`)),\n      catchError(this.handleError<any>('addGrade'))\n    );\n  }\n\n  updateGrade(grade: Grade): Observable<any> {\n    console.log(grade)\n    const url = `${this.usersUrl}/grade/update`;\n    return this.http.put(url, grade, this.httpOptions).pipe(\n      tap(_ => this.log(`updated grade id=${grade._id}`)),\n      catchError(this.handleError<any>('updateGrade'))\n    );\n  }\n\n  deleteGrade(grade: Grade): Observable<Grade> {\n    const id = grade._id;\n    const url = `${this.usersUrl}/grade/delete/${id}`;\n    return this.http.delete<Grade>(url, this.httpOptions).pipe(\n      tap(_ => this.log(`deleted grade id=${id}`)),\n      catchError(this.handleError<Department>('deleteGrade'))\n    );\n  }\n\n  addUnit(unit: Unit): Observable<Unit> {\n    console.log(unit)\n    const url = `${this.usersUrl}/unit/add`;\n    return this.http.post(url, unit, this.httpOptions).pipe(\n      tap((newUnit: Unit) => this.log(`added unit w/ id=${newUnit._id}`)),\n      catchError(this.handleError<Unit>('addUnit'))\n    );\n  }\n\n  updateUnit(unit: Unit): Observable<Unit> {\n    console.log(unit)\n    const url = `${this.usersUrl}/unit/update`;\n    return this.http.put(url, unit, this.httpOptions).pipe(\n      tap(_ => this.log(`updated unit id=${unit._id}`)),\n      catchError(this.handleError<any>('updateUnit'))\n    );\n  }\n\n  addProject(project: Project): Observable<Project> {\n    console.log(project)\n    const url = `${this.usersUrl}/project/add`;\n    return this.http.post(url, project, this.httpOptions).pipe(\n      tap((newProject: Project) => this.log(`added project w/ id=${newProject._id}`)),\n      catchError(this.handleError<any>('addProject'))\n    );\n  }\n\n  addGate(gate: Gate): Observable<Gate> {\n    console.log(gate)\n    const url = `${this.usersUrl}/gate/add`;\n    return this.http.post(url, gate, this.httpOptions).pipe(\n      tap((newGate: Gate) => this.log(`added gate w/ id=${newGate._id}`)),\n      catchError(this.handleError<any>('addGate'))\n    );\n  }\n\n  updateGate(gate: Gate): Observable<any> {\n    console.log(gate)\n    const url = `${this.usersUrl}/gate/update`;\n    return this.http.put(url, gate, this.httpOptions).pipe(\n      tap(_ => this.log(`updated gate id=${gate._id}`)),\n      catchError(this.handleError<any>('updateGate'))\n    );\n  }\n\n\n  updateProject(project: Project): Observable<any> {\n    console.log(project)\n    const url = `${this.usersUrl}/project/update`;\n    return this.http.put(url, project, this.httpOptions).pipe(\n      tap(_ => this.log(`updated project id=${project._id}`)),\n      catchError(this.handleError<any>('updateProject'))\n    );\n  }\n\n  deleteProject(project: Project): Observable<Project> {\n    const id = project._id;\n    const url = `${this.usersUrl}/project/delete/${id}`;\n    return this.http.delete<Project>(url, this.httpOptions).pipe(\n      tap(_ => this.log(`deleted project id=${id}`)),\n      catchError(this.handleError<Department>('deleteProject'))\n    );\n  }\n\n  getGrades(): Observable<Grade[]> {\n    const url = `${this.usersUrl}/grades`;\n    this.messageService.add('UserService: fetched grades');\n    return this.http.get<Grade[]>(url)\n      .pipe(\n        tap(_ => this.log('fetched grades')),\n        catchError(this.handleError<Grade[]>('getGrades', []))\n      );\n  }\n\n  getUser(id: string): Observable<User> {\n    const url = `${this.usersUrl}/user/${id}`;\n    return this.http.get<User>(url).pipe(\n      tap((user: User) => this.log(`fetched user id = ${user._id}`)),\n      catchError(this.handleError<User>(`getUser id=${id}`))\n    );\n  }\n\n  addUser(user: User): Observable<User> {\n    console.log(user)\n    const url = `${this.usersUrl}/register`;\n    return this.http.post<User>(url, user, this.httpOptions).pipe(\n      tap((newUser: User) => this.log(`added user w/ id=${newUser._id}`)),\n      catchError(this.handleError<User>('addUser'))\n    );\n  }\n\n  updateUser(user: User): Observable<User> {\n    const url = `${this.usersUrl}/user/update`;\n    return this.http.put(url, user, this.httpOptions).pipe(\n      tap((updatedUser: User) => this.doUpdateUser(updatedUser)),\n      catchError(this.handleError<any>('updateUser'))\n    );\n  }\n\n  private doUpdateUser(updatedUser: User) {\n    this.log(`updated user id=${updatedUser._id}`)\n    // this.snackBarMessage(`Updated User ${updatedUser.name}`)\n    this.storeUser(updatedUser)\n  }\n\n  addCreateForm(createForm: Create): Observable<Create> {\n    console.log(createForm)\n    const url = `${this.usersUrl}/gatepass/createForm/add`;\n    return this.http.post<Create>(url, createForm, this.httpOptions).pipe(\n      tap((newCreateForm: Create) => this.log(`added create form`)),\n      catchError(this.handleError<Create>('addCreateForm'))\n    );\n  }\n\n  addGpArray(gpArray: GpArray): Observable<GpArray> {\n    console.log(gpArray)\n    const url = `${this.usersUrl}/gatepass/GpArray/add`;\n    return this.http.post<GpArray>(url, gpArray, this.httpOptions).pipe(\n      tap((newgpArray: GpArray) => this.log(`added GatePass Array w/ id=${newgpArray._id}`)),\n      catchError(this.handleError<GpArray>('addGpArray'))\n    );\n  }\n\n  deleteGpArray(gpArray: GpArray) {\n    const id = gpArray._id;\n    const url = `${this.usersUrl}/gatepass/GpArray/delete/${id}`;\n    return this.http.delete<GpArray>(url, this.httpOptions).pipe(\n      tap((gpArray: GpArray) => this.log(`deleted GatePass Number ${gpArray.gatePassNo}`)),\n      catchError(this.handleError<GpArray>('deleteGpArray'))\n    )\n  }\n\n  addGatePass(gatePasses: MaterialGatePass[]): Observable<MaterialGatePass[]> {\n    console.log(gatePasses)\n    const url = `${this.usersUrl}/gatepass/add`;\n    return this.http.post<MaterialGatePass[]>(url, gatePasses, this.httpOptions).pipe(\n      tap((newGatePass: MaterialGatePass[]) => this.log(`added GatePass`)),\n      catchError(this.handleError<MaterialGatePass[]>('addGatePass'))\n    );\n  }\n\n  // getGpArrayById(id: string): Observable<GpArray> {\n  //   const url = `${this.usersUrl}/gatepass/${id}`;\n  //   return this.http.get<GpArray>(url).pipe(\n  //     tap((gpArray: GpArray) => this.log(`fetched user id = ${gpArray._id}`)),\n  //     catchError(this.handleError<GpArray>(`getGpArrayById id=${id}`))\n  //   );\n  // }\n\n  loginUser(user: User): Observable<boolean> {\n    console.log(user)\n    const url = `${this.usersUrl}/login`;\n    return this.http.post<any>(url, user)\n      .pipe(\n        tap(userJwt =>\n          // console.log('data: ',tokens)\n          this.doLoginUser(userJwt)\n          // this.log(`logged in user w/ empId=${data.user.empId}`)\n        ),\n        mapTo(true),\n        catchError(this.handleError<any>('loginUser', []))\n    )\n  }\n\n  private doLoginUser(userJwt: UserJwt) {\n    console.log(userJwt.user)\n    // localStorage.setItem(this.loggedIn, userJwt.user)\n    this.loggedIn = userJwt.user\n    localStorage.setItem('USER', JSON.stringify(this.loggedIn))\n    var tokens: Tokens;\n    tokens = userJwt\n    this.storeTokens(tokens);\n    this.snackBarMessage(`Logged in successfully! Welcome ${userJwt.user.name}`)\n  }\n\n  private storeTokens(tokens: Tokens) {\n    localStorage.setItem(this.JWT_TOKEN, tokens.jwt);\n    localStorage.setItem(this.REFRESH_TOKEN, tokens.refreshToken)\n  }\n\n  logOutUser() {\n    console.log('logOutUser')\n    const url = `${this.usersUrl}/logout`;\n    return this.http.post<any>(url, {\n      'refreshToken': this.getRefreshToken()\n    }).pipe(\n      tap(() => this.doLogoutUser()),\n      mapTo(true),\n      catchError(this.handleError<any>('logOutUser'))\n    )\n  }\n\n  private doLogoutUser() {\n    this.loggedIn = null\n    this.snackBarMessage('Logged out successfully')\n    this.removeTokens();\n  }\n\n  private removeTokens() {\n    localStorage.removeItem('USER');\n    localStorage.removeItem(this.JWT_TOKEN);\n    localStorage.removeItem(this.REFRESH_TOKEN);\n    localStorage.removeItem('gatePassNo');\n    localStorage.removeItem('filter');\n  }\n\n  refreshToken() {\n    const url = `${this.usersUrl}/refresh`\n    return this.http.post<any>(url, {\n      'refreshToken': this.getRefreshToken()\n    }).pipe(tap((tokens: Tokens) => {\n      this.storeJwtToken(tokens.jwt);\n    }));\n  }\n\n  private getRefreshToken() {\n    return localStorage.getItem(this.REFRESH_TOKEN)\n  }\n\n  private storeJwtToken(jwt: string) {\n    localStorage.setItem(this.JWT_TOKEN, jwt)\n  }\n\n  getJwtToken() {\n    return localStorage.getItem(this.JWT_TOKEN);\n  }\n\n  searchUsers(term: string, selectedAuthorization: boolean, selectedProject: string): Observable<User[]> {\n    if (!term.trim()) {\n      // if not search term, return empty hero array.\n      return of([]);\n    }\n    return this.http.get<User[]>(`${this.usersUrl}/user/search/${term}/${selectedAuthorization}/${selectedProject}`).pipe(\n      tap(x => x.length ?\n         this.log(`found users matching \"${term}\"`) :\n         this.log(`no users matching \"${term}\"`)),\n      catchError(this.handleError<User[]>('searchUsers', []))\n    );\n  }\n\n  searchGatePasses(term: string, print: string, project: string): Observable<GpArray[]> {\n    if (!term.trim()) {\n      return of([]);\n    }\n    return this.http.get<GpArray[]>(`${this.usersUrl}/gatepass/search/${term}/${print}/${project}`).pipe(\n      tap(x => x.length ?\n         this.log(`found gate passes matching \"${term}\"`) :\n         this.log(`no gate passes matching \"${term}\"`)),\n      catchError(this.handleError<GpArray[]>('searchGatePasses', []))\n    );\n  }\n  private log(message: string) {\n    this.messageService.add(`UserService: ${message}`);\n  }\n\n  private handleError<T>(operation = 'operation', result?: T) {\n    return (error: any): Observable<T> => {\n      console.error(error);\n      this.log(`${operation} failed: ${error.message}`);\n      this.snackBarError(error);\n      return of(result as T);\n    }\n  }\n\n\n  snackBarMessage(message: string) {\n\n    this._snackBar.open(`${message}`, 'Ok', {\n      duration: 2000,\n    });\n\n  }\n\n  snackBarError(error) {\n\n    this._snackBar.open(`${error.statusText}`, 'Ok', {\n      duration: 2000,\n    });\n\n  }\n\n}\n","import { Injectable } from '@angular/core';\nimport {\n  HttpRequest,\n  HttpHandler,\n  HttpEvent,\n  HttpInterceptor, HttpErrorResponse\n} from '@angular/common/http';\nimport { BehaviorSubject, Observable, throwError } from 'rxjs';\nimport { UserService } from './services/user/user.service';\nimport { catchError, filter, take, switchMap } from 'rxjs/operators';\n\n@Injectable()\nexport class TokenInterceptor implements HttpInterceptor {\n\n  private isRefreshing = false;\n  private refreshTokenSubject: BehaviorSubject<any> = new BehaviorSubject<any>(null);\n\n  constructor(public userService: UserService) {}\n\n  intercept(request: HttpRequest<unknown>, next: HttpHandler): Observable<HttpEvent<any>> {\n\n    if(this.userService.getJwtToken()) {\n      request = this.addToken(request, this.userService.getJwtToken());\n    }\n\n    return next.handle(request).pipe(catchError(error => {\n      if(error instanceof HttpErrorResponse && error.status === 401) {\n        return this.handle401Error(request, next);\n      } else {\n        return throwError(error);\n      }\n    }));\n  }\n\n  private addToken(request: HttpRequest<any>, token: string) {\n    return request.clone({\n      setHeaders: {\n        'Authorization': `Bearer ${token}`\n      }\n    });\n  }\n\n  private handle401Error(request: HttpRequest<any>, next: HttpHandler) {\n    if(!this.isRefreshing) {\n      this.isRefreshing = true;\n      this.refreshTokenSubject.next(null);\n\n      return this.userService.refreshToken().pipe(\n        switchMap((token: any) => {\n          this.isRefreshing = false;\n          this.refreshTokenSubject.next(token.jwt);\n          return next.handle(this.addToken(request, token.jwt));\n        }));\n    } else {\n      return this.refreshTokenSubject.pipe(\n        filter(token => token != null),\n        take(1),\n        switchMap(jwt => {\n          return next.handle(this.addToken(request, jwt));\n        }));\n    }\n  }\n\n\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n","/* (ignored) */","/* (ignored) */","/* (ignored) */"]}